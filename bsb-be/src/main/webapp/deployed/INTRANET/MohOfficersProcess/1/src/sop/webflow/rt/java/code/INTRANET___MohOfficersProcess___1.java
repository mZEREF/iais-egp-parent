/**
 * Generated by SIT
 *
 * Feel free to add  methods  or comments. The content of this 
 * file will be kept as-is when committed.
 *
 * Extending this  class is not recommended , since the class-
 * name will change together with the version. Calling methods
 * from external code is not recommended as well , for similar
 * reasons.
 */
package sop.webflow.rt.java.code;
import sop.webflow.rt.api.BaseProcessClass;
import com.ecquaria.cloud.helper.EngineHelper;

public class INTRANET___MohOfficersProcess___1 extends BaseProcessClass {

	private static final String DELEGATOR ="mohProcessingDelegator";
	
	public void step1_OnStepProcess_0() throws Exception {
	// 		Step1->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "start", this);
	}

	public void prepareData_OnStepProcess_0() throws Exception {
	// 		prepareData->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "prepareData", this);
	}

	public void screenedByDO_OnStepProcess_0() throws Exception {
	// 		screenedByDO->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "screenedByDO", this);
	}

	public void doReject_OnStepProcess_0() throws Exception {
	// 		doReject->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "doReject", this);
	}

	public void requestForInformation_OnStepProcess_0() throws Exception {
	// 		requestForInformation->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "requestForInformation", this);
	}

	public void recommendApproval_OnStepProcess_0() throws Exception {
	// 		recommendApproval->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "recommendApproval", this);
	}

	public void recommendRejection_OnStepProcess_0() throws Exception {
	// 		recommendRejection->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "recommendRejection", this);
	}

	public void approvalForInspection_OnStepProcess_0() throws Exception {
	// 		approvalForInspection->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "approvalForInspection", this);
	}

	public void aoReject_OnStepProcess_0() throws Exception {
	// 		aoReject->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "aoReject", this);
	}

	public void routeBackToDO_OnStepProcess_0() throws Exception {
	// 		routeBackToDO->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "routeBackToDO", this);
	}

	public void routeToHM_OnStepProcess_0() throws Exception {
	// 		routeToHM->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "routeToHM", this);
	}

	public void aoApproved_OnStepProcess_0() throws Exception {
	// 		aoApproved->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "aoApproved", this);
	}

	public void hmApprove_OnStepProcess_0() throws Exception {
	// 		hmApprove->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "hmApprove", this);
	}

	public void hmReject_OnStepProcess_0() throws Exception {
	// 		hmReject->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "hmReject", this);
	}

	public void prepareSwitch_OnStepProcess_0() throws Exception {
	// 		prepareSwitch->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "prepareSwitch", this);
	}

}
