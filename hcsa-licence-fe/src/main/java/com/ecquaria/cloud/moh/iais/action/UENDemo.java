/*
 * This file is generated by ECQ project skeleton automatically at May 18, 2015.
 *
 * Copyright 2014-2015, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 * No part of this material may be copied, reproduced, transmitted,
 * stored in a retrieval system, reverse engineered, decompiled,
 * disassembled, localised, ported, adapted, varied, modified, reused,
 * customised or translated into any language in any form or by any means,
 * electronic, mechanical, photocopying, recording or otherwise,
 * without the prior written permission of Ecquaria Technologies Pte Ltd.
 */
package com.ecquaria.cloud.moh.iais.action;

import java.io.InputStream;
import java.util.Properties;
import java.util.Scanner;

/**
 * UENDemo.java
 *
 * @author WuYun
 */
public class UENDemo {
	
	private static final String UEN_4_OTHER_ENTITY_ARR = "UEN-4-OTHER-ENTITY-MULTIPLUY-ARR";

	/**
	 * @param args
	 * @throws Throwable 
	 */
	public static void main(String[] args) throws Throwable {
		InputStream in = null;
		Properties prop = new Properties();
		Scanner console = new Scanner(System.in);
		try{
			in = UENDemo.class.getClassLoader().getResourceAsStream("sysconfig.properties");
			if(in != null){
				prop.load(in);
			}
			System.out.println("Like T12CM1234");
			String input = console.nextLine();
			char lastOneOfUEN = getLastCharOfUEN(input, prop);
			System.out.println("UENNo: " + lastOneOfUEN);
			
		}finally{
			if(in != null){
				in.close();
			}
			console.close();
		}

	}

	// ^[T]\\d{2}((LL)|(CM)|(CS))\\d{4}[A-Z]$
	private static char getLastCharOfUEN(String input, Properties prop) {
		String[] mutiplyArrStr = prop.getProperty(UEN_4_OTHER_ENTITY_ARR).split(",");
		int[] mutiplyArr = converttoIntArr(mutiplyArrStr);
		String dictionary = generateDictionary();
    	
    	if(mutiplyArr == null || dictionary == null){
			return 0;
		}
    	
    	int sum = 0;
    	for(int i = 0; i < mutiplyArr.length; i++){
    		int code = 0;
    		char c = input.charAt(i);
    		if(c >= '0' && c <= '9'){
    			// a number char
    			code = c - '0';
    			System.out.println(code);
    		}else {
    			code = dictionary.indexOf("" + c)+1;

    		}
    		
    		sum = code*mutiplyArr[i]+sum;
    		    		
    	}
    	
    	System.out.println(sum);
    	  	
    	int index = sum%11;
    	System.out.println(index);
    	// what the last char should be
    	char passChar = dictionary.charAt(index);
    			
		return passChar;
	}

	private static String generateDictionary() {
		// excludes alphabet I and O.
		StringBuilder buf = new StringBuilder();
		for(char c = 'A'; c <= 'Z'; c++){
			if(c != 'I' && c != 'O'){
				buf.append(c);
			}
		}
		return buf.toString();
	}

	private static int[] converttoIntArr(String[] mutiplyArrStr) {
		if(mutiplyArrStr == null){
			return null;
		}
		
		int len = mutiplyArrStr.length;
		
		int[] result = new int[len];
		
		for(int i = 0; i < len; i++){
			if(mutiplyArrStr[i] == null){
				return null;
			}
			
			try {
				result[i] = Integer.parseInt(mutiplyArrStr[i]);
			} catch (Exception e) {
				return null;
			}
			
		}
		
		return result;
	}

}
