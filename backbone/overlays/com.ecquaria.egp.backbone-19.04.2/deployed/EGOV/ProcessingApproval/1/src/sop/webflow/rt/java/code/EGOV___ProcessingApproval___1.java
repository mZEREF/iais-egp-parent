/**
 * Generated by SIT
 *
 * Feel free to add  methods  or comments. The content of this 
 * file will be kept as-is when committed.
 *
 * Extending this  class is not recommended , since the class-
 * name will change together with the version. Calling methods
 * from external code is not recommended as well , for similar
 * reasons.
 */
package sop.webflow.rt.java.code;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import com.ecquaria.egov.core.common.constants.AppConstants;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import sop.i18n.MultiLangUtil;
import sop.util.MessageTemplateHelper;
import sop.webflow.rt.api.BaseProcessClass;
import sop.webflow.rt.engine5.Constants;

import com.ecquaria.egov.core.svcreg.ServiceRegistry;
import com.ecquaria.egp.api.AppStatus;
import com.ecquaria.egp.core.application.AppInParam;
import com.ecquaria.egp.core.application.AppOutParam;
import com.ecquaria.egp.core.application.Application;
import com.ecquaria.egp.core.bat.AppStatusHelper;
import com.ecquaria.egp.core.bat.BATControllerHelper;

import ecq.commons.exception.BaseRuntimeException;
import ecq.commons.exception.BaseException;
import ecq.commons.helper.StringHelper;

public class EGOV___ProcessingApproval___1 extends BaseProcessClass {

    /**
     * 
     */
    private static final long serialVersionUID = 8147760078573532131L;

    private static final String ATTR_PREFIX = "Process_Approval";
    private static final String ATTR_CURRENT_STAGE = ATTR_PREFIX + "_CURRENT_STAGE";

    private static final String KEY_SUBMIT_STATUS_SWITCH = "appStatusType";

    private static final String STAGE_PROCESSING = "processing";
    private static final String STAGE_APPROVAL = "approval";

    private static final String STEP_PROCESSING_TASK = "DoPendingProcessing";
    private static final String STEP_PROCESSING_PENDING = "DoPendingProcessingLv1";
    private static final String STEP_PROCESSING_APPROVE_BACK = "ApproveBack";

    private static final String STEP_APPROVAL_TASK = "PendingApprove";
    private static final String STEP_APPROVAL_UPDATE = "DoPendingUpdateStatus";

    private static final String KEY_EGP_APP_UPDATE_STATUS_PROCESSING_APPROVAL = "egp.app.update.status.processing.approval";
    private static final String MESSAGE_UPDATE_STATUS_PROCESSING_APPROVAL = "Application:{0} has been updated from {1} to {2} successfully.";

    private static final String REGEX_PROCESSING_CODE_PROCESSING = ".*001001$";
    private static final String SWITCH_PROCESSING_CODE_PROCESSING = "p_processing";
    private static final String REGEX_PROCESSING_CODE_REJECTED = ".*001002$";
    private static final String SWITCH_PROCESSING_CODE_REJECTED = "p_rejected";
    private static final String REGEX_PROCESSING_CODE_PENDING_AMENDMENT = ".*001003$";
    private static final String SWITCH_PROCESSING_CODE_PENDING_AMENDMENT = "p_pending";

    private static final String REGEX_APPROVAL_CODE_APPROVED = ".*002001$";
    private static final String SWITCH_APPROVAL_CODE_APPROVED = "a_approved";
    private static final String REGEX_APPROVAL_CODE_REJECTED = ".*002002$";
    private static final String SWITCH_APPROVAL_CODE_REJECTED = "a_rejected";
    private static final String REGEX_APPROVAL_CODE_PENDING_AMENDMENT = ".*002003$";
    private static final String SWITCH_APPROVAL_CODE_PENDING_AMENDMENT = "a_pending";

    private static final Map<String, String> CODE_MAP = new HashMap<String, String>(6);
    static {
        CODE_MAP.put(REGEX_PROCESSING_CODE_PROCESSING, SWITCH_PROCESSING_CODE_PROCESSING);
        CODE_MAP.put(REGEX_PROCESSING_CODE_REJECTED, SWITCH_PROCESSING_CODE_REJECTED);
        CODE_MAP.put(REGEX_PROCESSING_CODE_PENDING_AMENDMENT,
                SWITCH_PROCESSING_CODE_PENDING_AMENDMENT);
        CODE_MAP.put(REGEX_APPROVAL_CODE_APPROVED, SWITCH_APPROVAL_CODE_APPROVED);
        CODE_MAP.put(REGEX_APPROVAL_CODE_REJECTED, SWITCH_APPROVAL_CODE_REJECTED);
        CODE_MAP.put(REGEX_APPROVAL_CODE_PENDING_AMENDMENT, SWITCH_APPROVAL_CODE_PENDING_AMENDMENT);
    }

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    private void doPrepareTask() throws BaseRuntimeException {
        long taskId = BATControllerHelper.getTaskId(this);
        if (taskId < 0) {
            throw new BaseRuntimeException("Invalid parameter[taskid] in request");
        }

        if (!BATControllerHelper.checkCase(this)) {
            throw new BaseRuntimeException("Broken case");
        }
    }

    private void doPrepare(String stageName) {
        BATControllerHelper.prepareApplicationView(this, stageName);
    }

    public void start_OnStepProcess_0() throws Exception {

    }

    public void prepareTask_OnStepProcess_0() throws Exception {
        doPrepareTask();
    }

    public void prepare_OnStepProcess_0() throws Exception {
        doPrepare(getCurrentStage());

        // save tab index back
        AppInParam appInParam = BATControllerHelper.getAppInParam(this);
        AppOutParam appOutParam = BATControllerHelper.getAppOutParam(this);
        appInParam.setSelectedPage(appOutParam.getSelectedPage());
    }

    public void bindStatusType_OnStepProcess_0() throws Exception {
        AppStatus appStatus = BATControllerHelper.getSubmittedAppStatus(this);
        for (Entry<String, String> entry : CODE_MAP.entrySet()) {
            if (appStatus.getCode().matches(entry.getKey())) {
                request.setAttribute(KEY_SUBMIT_STATUS_SWITCH, entry.getValue());
                return;
            }
        }
    }

    public void pendingAmandment_OnStepProcess_0() throws Exception {
        updateStatus(STEP_PROCESSING_PENDING);
    }

    private void completeTask() {
        BATControllerHelper.completeTask(this);
    }

    private void updateStatus(String tokenComp) throws BaseException {
        AppStatus newStatus = BATControllerHelper.getSubmittedAppStatus(this);
        AppStatus oldStatus = BATControllerHelper.getCurrentAppStatus(this);
        if (oldStatus.getCode().equals(newStatus.getCode())) {
            throw new BaseRuntimeException("The status has been changed to " + oldStatus.getLabel());
        }
        try{
            BATControllerHelper.updateAppStatus(this, newStatus.getCode(), tokenComp);
        }catch (Exception e){
            throw  new BaseException(e);
        }

        if (logger.isDebugEnabled()) {
            logger.debug("Application new status: " + newStatus);
        }

        AppInParam appInParam = BATControllerHelper.getAppInParam(this);
        Application app = BATControllerHelper.getApplication(this);
        String appNo = app.getAppNo();
        String oldDisplayStatus = oldStatus.getExternalLabel();
        String newDisplayStatus = newStatus.getExternalLabel();
        String message = MessageTemplateHelper.getMessage(KEY_EGP_APP_UPDATE_STATUS_PROCESSING_APPROVAL,
                new String[] { appNo, MultiLangUtil.translate(request, AppConstants.KEY_TRANSLATION_MODULE_LABEL,oldDisplayStatus), MultiLangUtil.translate(request, AppConstants.KEY_TRANSLATION_MODULE_LABEL,newDisplayStatus) },
                MESSAGE_UPDATE_STATUS_PROCESSING_APPROVAL);
        appInParam.setMessage(message);

    }

    public void approve_OnStepProcess_0() throws Exception {
        updateStatus(null);
    }

    public void updateAppLv2_OnStepProcess_0() throws Exception {

    }

    public void complete_OnStepProcess_0() throws Exception {
        updateStatus(null);
    }

    public void pendingUpdateStatus_OnStepProcess_0() throws Exception {
        updateStatus(STEP_APPROVAL_UPDATE);
        completeTask();
    }

    public void pendingApprove_OnStepProcess_0() throws Exception {
        completeTask();
        BATControllerHelper.sendTask(this, STAGE_APPROVAL, false);
        
        String project = this.controller.getCurrentProject();
        String path = this.controller.getCurrentProcessPath();
        String processName = this.controller.getCurrentProcessName();
        int version = this.controller.getCurrentProcessVersion();
        this.controller.invokeProcess(project, path, processName, version,
                STEP_PROCESSING_APPROVE_BACK, Constants.CONTINUE);
    }

    public void approveStart_OnStepProcess_0() throws Exception {
        setCurrentStage(STAGE_APPROVAL);
    }

    public void pendingProcessing_OnStepProcess_0() throws Exception {
        pendingDefault(STAGE_PROCESSING);
    }

    private void pendingDefault(String stageName) throws BaseException {
        ServiceRegistry svcReg = BATControllerHelper.getServiceInfo(this);
        String processingType = svcReg.getProcessFlow().getName();
        AppStatus newStatus = AppStatusHelper.getInstance().getDefaultStatus(processingType,
                stageName);
       try{
           BATControllerHelper.updateAppStatus(this, newStatus.getCode());
       }catch (Exception e){
           throw  new BaseException(e);
       }

    }

    public void doPendingProcessing_OnStepProcess_0() throws Exception {
        BATControllerHelper.sendTask(this, STAGE_PROCESSING, false);
        BATControllerHelper.invokeReturnStep(this);
    }

    private void sendSuspendTask(String stageName, String stepName) {
        String continueUrl = BATControllerHelper.generateContinueUrl(this, stepName, false);

        if (BATControllerHelper.isStickyness()) {
            BATControllerHelper.sendStickynessTask(this, continueUrl);

        } else {
            BATControllerHelper.sendTask(this, stageName, continueUrl);
        }
    }

    public void autoPendingUpdate_OnStepProcess_0() throws Exception {
        AppStatus oldStatus = BATControllerHelper.getCurrentAppStatus(this);
        AppStatus newStatus = AppStatusHelper.getInstance().getAppStatus(oldStatus.getNextStatus());
        if (null == newStatus) {
            // it is pending amendment
            // if null, use default URL as task URL
            pendingDefault(STAGE_APPROVAL);
            sendSuspendTask(STAGE_APPROVAL, STEP_APPROVAL_TASK);
            return;
        }

        if (oldStatus.getCode().equals(newStatus.getCode())) {
            throw new BaseRuntimeException("The status has been " + oldStatus.getLabel());
        }

        if (StringHelper.isEmpty(newStatus.getNextStatus())) {
            BATControllerHelper.updateAppStatus(this, newStatus.getCode());

        } else {
            BATControllerHelper.updateAppStatus(this, newStatus.getCode(), STEP_APPROVAL_UPDATE);
        }

    }

    public void reject_OnStepProcess_0() throws Exception {
        updateStatus(null);
    }

    public void autoPendingProcessing_OnStepProcess_0() throws Exception {
        pendingDefault(STAGE_PROCESSING);
        sendSuspendTask(STAGE_PROCESSING, STEP_PROCESSING_TASK);

        BATControllerHelper.invokeReturnStep(this);
    }

    public void stopLv1_OnStepProcess_0() throws Exception {
        BATControllerHelper.invokeReturnStep(this);
    }

    public void prepareStageLv1_OnStepProcess_0() throws Exception {
        setCurrentStage(STAGE_PROCESSING);
    }

    private void setCurrentStage(String stageName) {
        request.setAttribute(ATTR_CURRENT_STAGE, stageName);
    }

    private String getCurrentStage() {
        return (String) request.getAttribute(ATTR_CURRENT_STAGE);
    }

    public void backToPrepareLv1_OnStepProcess_0() throws Exception {
        completeTask();
        setCurrentStage(STAGE_PROCESSING);
    }

    public void backToPrepareLv2_OnStepProcess_0() throws Exception {
        completeTask();
        setCurrentStage(STAGE_APPROVAL);
    }

    public void approveLv2_OnStepProcess_0() throws Exception {
        updateStatus(STEP_APPROVAL_UPDATE);
    }

    public void approveBack_OnStepProcess_0() throws Exception {
        setCurrentStage(STAGE_APPROVAL);
    }

}
