/*
 * This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.helper;

import com.ecquaria.cloud.moh.iais.common.constant.AuditTrailConsts;
import com.ecquaria.cloud.moh.iais.common.dto.SearchParam;
import com.ecquaria.cloud.moh.iais.common.utils.MiscUtil;
import com.ecquaria.cloud.moh.iais.common.utils.ParamUtil;
import com.ecquaria.cloud.moh.iais.common.utils.RestApiUtil;
import com.ecquaria.cloud.moh.iais.dto.PostCodeDto;
import com.ecquaria.cloud.moh.iais.dto.QueryCondition;
import com.ecquaria.cloud.moh.iais.web.logging.dto.AuditTrailDto;
import com.ecquaria.egp.api.EGPHelper;
import lombok.extern.slf4j.Slf4j;
import sop.iwe.SessionManager;
import sop.rbac.user.User;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

@Slf4j
public final class IaisEGPHelper extends EGPHelper {

    /**
     * @description: The method to set login user info into Audit trail from request
     *
     * @author: Jinhua on 2019/7/17 17:34
     * @param: [dto]
     * @return: void
     */
    public static void setAuditLoginUserInfo(AuditTrailDto dto) {
        if (dto == null)
            return;

        HttpServletRequest request = MiscUtil.getCurrentRequest();
        if (request == null)
            return;

        User user = SessionManager.getInstance(request).getCurrentUser();
        HttpSession session = request.getSession();
        if (user != null) {
            dto.setNricNumber(user.getId());
            dto.setMohUserId(user.getId());
            dto.setUserDomain(SessionManager.getInstance(request).getCurrentUserDomain());
        }
        dto.setSessionId(session.getId());
        dto.setClientIp(MiscUtil.getClientIp(request));
        dto.setUserAgent(request.getHeader("User-Agent"));
    }

    public static String getRootPath() {
        String urlStr = IaisEGPHelper.class.getResource("").toString();
        String serverPath = urlStr.substring(urlStr.lastIndexOf("file:/") + 6).replaceAll("%20", " ");
        String path = "";
        if (serverPath.lastIndexOf("WEB-INF") > 0)
            path = serverPath.substring(0, serverPath.lastIndexOf("WEB-INF")) ;

        return path;
    }

    public static AuditTrailDto getCurrentAuditTrailDto() {
        AuditTrailDto dto = null;
        HttpServletRequest request = MiscUtil.getCurrentRequest();
        if (request != null)
            dto = (AuditTrailDto) ParamUtil.getSessionAttr(request, AuditTrailConsts.SESSION_ATTR_PARAM_NAME);

        if (dto == null)
            dto = AuditTrailDto.getThreadDto();

        return dto;
    }
    /**
     * @description: get the PostCodeDto by the postalCode
     *
     * @author: suocheng on 8/23/2019 4:27 PM
     * @param: [postalCode]
     * @return: com.ecquaria.cloud.moh.iais.dto.PostCodeDto
     */
    public static  PostCodeDto getPostCodeByCode(String postalCode) {
        Map<String, Object> map = new HashMap<>();
        map.put("searchField", "postalCode");
        map.put("filterValue", postalCode);
        return RestApiUtil.getByReqParam("postcodes", map, PostCodeDto.class);
    }

    /**
     * use by delegator to clear session attr, prefix of param need use 'Param_'
     * @param request HttpServletRequest
     * @param clz   Delegator Class
     * @throws IllegalAccessException
     */
    public static void clearSessionAttr(HttpServletRequest request, Class<?> clz) throws IllegalAccessException {
        if(request == null || clz == null){
            return;
        }

        Field[]  fields = clz.getFields();
        if(fields != null){
            for(Field f : fields){
                String fieldName = f.getName();
                if(fieldName.startsWith("PARAM_")){
                    ParamUtil.setSessionAttr(request, (String) f.get(fieldName), null);
                }
            }
        }
    }

    /**
     * Get query conditions by parameters
     * @param request HttpServletRequest
     * @param qc QueryCondition
     * @return
     */
    public static SearchParam getSearchParam(HttpServletRequest request, QueryCondition qc){
        return getSearchParam(request, false, qc);
    }

    public static SearchParam getSearchParam(HttpServletRequest request,
                                             boolean isNew, QueryCondition qc){
        SearchParam param = (SearchParam) ParamUtil.getSessionAttr(request, qc.getSearchAttr());
        try {
            if(param == null || isNew){
                param = new SearchParam(qc.getClz().getName());
                param.setPageSize(qc.getPageSize());
                param.setPageNo(qc.getPageNo());
                param.setSort(qc.getSortField(), SearchParam.ASCENDING);
                ParamUtil.setSessionAttr(request, qc.getSearchAttr(), param);
            }
        }catch (NullPointerException e){
            log.info("getSearchParam qc===>>>> " + e.getMessage());
        }
        return param;
    }

    /**
     * Get the record by rowguid
     * @param serviceName
     * @param rowguid
     * @param clz
     * @param <T>
     * @return
     */
    public static <T> T getReocrdByRowguid(String serviceName, String rowguid, Class<? extends Serializable> clz){
        Map<String, Object> map = new HashMap<>();
        map.put("rowguid", rowguid);
        return (T) RestApiUtil.getByReqParam(serviceName + "/{rowguid}", map, clz);
    }

    private IaisEGPHelper() {throw new IllegalStateException("Utility class");}
}
