/*
 * This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.helper;

import com.ecquaria.cloud.moh.iais.dto.SearchParam;
import com.ecquaria.cloud.moh.iais.sql.SqlMap;
import freemarker.template.TemplateException;
import lombok.extern.slf4j.Slf4j;
import sg.gov.moh.iais.common.exception.IaisRuntimeException;
import sg.gov.moh.iais.common.utils.StringUtil;

import java.io.IOException;
import java.util.Map;

/**
 * SqlHelper
 *
 * @author Jinhua
 * @date 2019/7/18 17:17
 */
@Slf4j
public class SqlHelper {

    public static String getQuerySql(String catalog, String key, SearchParam param) {
        String sql = null;
        try {
            String mainSql = SqlMap.INSTANCE.getSql(catalog, key, param.getParams());
            // order by clause
            String orderStr = "";
            if (!param.getSortMap().isEmpty()) {
                StringBuffer orderBySql = new StringBuffer();
                orderBySql.append(" ORDER BY ");
                for (Map.Entry<String, String> ent : param.getSortMap().entrySet()) {
                    orderBySql.append(ent.getKey()).append(" ").append(ent.getValue()).append(",");
                }
                orderStr = orderBySql.substring(0, orderBySql.length() - 1);
            }
            // paging, it's only for SQL Server
            if (param.getPageSize() > 0 && param.getPageNo() > 0) {
                if (StringUtil.isEmpty(orderStr))
                    throw new IaisRuntimeException("If used paging, there must be a default sorting column!!");

                int from = (param.getPageNo() - 1) * param.getPageSize() + 1;
                int to = param.getPageNo() * param.getPageSize();
                sql = "SELECT * FROM (SELECT ROW_NUMBER() OVER(" + orderStr + ") AS ROWNUM, a.* FROM ("
                        + mainSql + ") a) b WHERE b.ROWNUM <= " + to + " AND b.ROWNUM >= " + from;
            } else {
                sql = mainSql + orderStr;
            }
        } catch (IOException | TemplateException e) {
            log.error(e.getMessage(), e);
            throw new IaisRuntimeException(e);
        }

        return sql;
    }

    /**
     * @description: The method to get in SQL with param
     *
     * @author: Jinhua on 2019/7/23 10:48
     * @param: [fieldName, size]
     * @return: java.lang.String
     */
    public static String constructInCondition(String fieldName, int size) {
        StringBuffer sBuffer = new StringBuffer();
        if (size > 0){
            sBuffer.append(" ((").append(fieldName).append(" in (:").append(fieldName).append(0);

            int counter = 1;
            for (int i = 1; i < size; i++) {
                if (counter < 900) {
                    sBuffer.append(", :").append(fieldName).append(i);
                    counter++;
                } else {
                    //split for every 900 elements
                    sBuffer.append(")) or (").append(fieldName).append(" in (:").append(fieldName).append(i);
                    counter = 0;
                }
            }

            sBuffer.append(")))");
        }else{
            sBuffer.append(" 1 = 2 ");
        }

        return sBuffer.toString();
    }


    private SqlHelper() {throw new IllegalStateException("Utility class");}
}
