/*
 * This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.sql;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import javax.xml.XMLConstants;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SqlXmlParser
 *
 * @author Jinhua
 * @date 2019/7/18 17:55
 */
public class SqlXmlParser extends DefaultHandler {
    private static final String ELEM_SQLS       = "sqls";
    private static final String ELEM_SQL        = "sql";
    private static final String ATTR_CATALOG    = "catalog";
    private static final String ATTR_KEY        = "key";

    private List<Sql> sqls;
    private String catalog;
    private String key;
    private StringBuffer sqlStat; // accumulator

    public List<Sql> parseSqlXml(String xmlFileName) throws SAXException, ParserConfigurationException, IOException {
        SAXParserFactory spf = SAXParserFactory.newInstance();
        spf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
        SAXParser sp = spf.newSAXParser();
        sp.parse(xmlFileName, this);

        return sqls;
    }

    // Document Events - START
    public void startDocument() throws SAXException {
        sqls = new ArrayList<Sql>();
        sqlStat = new StringBuffer();
    }

    // Element Events - START
    public void startElement(String uri, String localName, String qName, Attributes attributes)
            throws SAXException {
        if (qName.equalsIgnoreCase(ELEM_SQLS)) {
            catalog = attributes.getValue(ATTR_CATALOG);
            if (catalog == null) {
                catalog = "default";
            }
        } else if (qName.equalsIgnoreCase(ELEM_SQL)) {
            sqlStat.setLength(0);
            key = attributes.getValue(ATTR_KEY);
        }
    }

    public void characters(char[] ch, int start, int length) throws SAXException {
        //tempVal = new String(ch, start, length);
        sqlStat.append(ch, start, length);
    }

    // Element Events - END
    public void endElement(String uri, String localName, String qName) throws SAXException {
        if (qName.equalsIgnoreCase(ELEM_SQL)) {
            // add it to the list
            Sql sql = new Sql();
            sql.setCatalog(catalog);
            sql.setKey(key);
            sql.setSql(sqlStat.toString());

            sqls.add(sql);
        }
    }

    // Document Events - END
    public void endDocument() throws SAXException {
        // end of parsing
    }
}
