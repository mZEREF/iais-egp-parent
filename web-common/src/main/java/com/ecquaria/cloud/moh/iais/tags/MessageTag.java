/*
 *   This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.tags;

import sg.gov.moh.iais.common.utils.MessageUtil;
import sg.gov.moh.iais.common.utils.ParamUtil;
import sg.gov.moh.iais.common.utils.StringUtil;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspTagException;
import javax.servlet.jsp.tagext.TagSupport;
import java.util.HashMap;


/**
 * Message Tag
 *
 *
 * @date        7/24/2019
 * @author      suocheng
 */
public final class MessageTag extends TagSupport {
    private static final long serialVersionUID = 4071660568914826715L;

    private String key;
    private String params;
    private boolean escape;

    public MessageTag() {
        super();
        init();
    }

    // resets local state
    private void init() {
        key = null;
        params = null;
        escape = true;
    }

    // Releases any resources we may have (or inherit)
    public void release() {
        super.release();
        init();
    }

    public int doStartTag() throws JspException {
        try {
            HashMap paramMap = null;
            if (!StringUtil.isEmpty(params)) {
                paramMap = (HashMap) ParamUtil.getScopeAttr((HttpServletRequest) pageContext.getRequest(), params);
            }
            String message = null;
            if (paramMap != null) {
                message = MessageUtil.getMessageDesc(key, paramMap);
            } else {
                message = MessageUtil.getMessageDesc(key);
            }
            if (escape) {
                pageContext.getOut().print(StringUtil.escapeJavascript(message));
            } else {
                pageContext.getOut().print(message);
            }
        } catch (Exception ex) {
            throw new JspTagException("MessageTag: " + ex.getMessage());
        }
        return SKIP_BODY;
    }

    public int doEndTag() {
        init();
        return EVAL_PAGE;
    }

    public void setKey(String key) {
        this.key = key;
    }
    public void setParams(String params) {
        this.params = params;
    }
    public boolean isEscape() {
        return escape;
    }
    public void setEscape(boolean escape) {
        this.escape = escape;
    }
}
