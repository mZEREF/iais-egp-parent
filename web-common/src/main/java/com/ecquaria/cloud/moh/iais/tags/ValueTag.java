/*
 *   This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.tags;

import com.ecquaria.cloud.moh.iais.util.AccessUtil;
import sg.gov.moh.iais.common.utils.StringUtil;

import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspTagException;

/**
 * Value Tag
 *
 *
 * @date        7/23/2019
 * @author      suocheng
 */
public final class ValueTag extends DivTagSupport {
    private static final long serialVersionUID = 2507648507715155034L;

    private int width;
    private boolean label;
    private boolean offset;
    private boolean align;

    public ValueTag() {
        super();
        init();
    }

    // resets local state
    @Override
    protected void init() {
        super.init();
        width = 0;
        label = false;
        offset = false;
        align = false;
    }

    @Override
    public void release() {
        super.release();
        init();
    }

    @Override
    public int doStartTag() throws JspException {
        boolean isFrontend = !AccessUtil.isBackend();
        int width = this.width;
        if (width <= 0) {
            width = isFrontend ? 8 : 9;
        }
        if (width > 12) {
            width = 12;
        }
        int offsetWidth = isFrontend ? 5 : 2;
        StringBuffer clazz = new StringBuffer();
        if (label) {
            clazz.append("float-left control-label");
        } else {
            clazz.append("float-left col-sm-12 col-md-").append(width);
        }
        if (align) {
            clazz.append(" col-md-align");
        }
        if (!StringUtil.isEmpty(cssClass)) {
            clazz.append(" ").append(cssClass);
        }

        StringBuffer html = new StringBuffer();
        html.append("<div class=\"").append(clazz);
        if (offset) {
            html.append(" offset-top col-md-offset-").append(offsetWidth);
        }
        html.append("\"");
        if (!StringUtil.isEmpty(id)) {
            html.append(" id=\"").append(id).append("\"");
        }
        if (!StringUtil.isEmpty(style)) {
            html.append(" style=\"").append(style).append("\"");
        }
        html.append(">");

        try {
            pageContext.getOut().print(StringUtil.escapeSecurityScript(html.toString()));
        } catch (Exception ex) {
            throw new JspTagException("ValueTag: " + ex.getMessage());
        }
        return EVAL_BODY_INCLUDE;
    }

    @Override
    public int doEndTag() throws JspException {
        try {
            pageContext.getOut().print("</div>");
        } catch (Exception ex) {
            throw new JspTagException("ValueTag: " + ex.getMessage());
        }
        return EVAL_PAGE;
    }

    public void setWidth(int width) {
        this.width = width;
    }
    public void setLabel(boolean label) {
        this.label = label;
    }
    public void setOffset(boolean offset) {
        this.offset = offset;
    }
    public void setAlign(boolean align) {
        this.align = align;
    }
}
