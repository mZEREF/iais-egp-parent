/*
 *   This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.helper;


import com.ecquaria.cloud.moh.iais.common.utils.StringUtil;
import com.ecquaria.cloud.moh.iais.common.validation.dto.ValidationResult;
import com.ecquaria.egp.core.forms.validation.FormValidationHelper;
import sop.webflow.rt.api.BaseProcessClass;

import java.lang.reflect.Field;
import java.util.Map;

/**
 * Form Validator Helper
 *
 * @author suocheng
 * @date 7/5/2019
 */

public class IFormValidatorHelper {

    /**
     * @description: do the validate for the form
     *
     * @author: suocheng on 7/5/2019 3:54 PM
     * @param: [bpc, formName, formDto]
     * @return: sg.gov.moh.iais.common.validation.ValidationResult
     */
    public static ValidationResult validateForm(BaseProcessClass bpc, String formName, Class formDto, boolean isAddToForm) throws InstantiationException, IllegalAccessException {
      Object obj = fillFormDataToDto(bpc,formName,formDto);
      ValidationResult result = WebValidationHelper.validateEntity(obj);
      if(isAddToForm){ addErrorToForm(bpc,formName,result); }
      return result;
    }
    /**
     * @description: get the form data to Dto
     *
     * @author: suocheng on 7/15/2019 4:04 PM
     * @param: [bpc, formName, formDto]
     * @return: java.lang.Object
     */
    public static <T> T fillFormDataToDto(BaseProcessClass bpc,String formName,Class<T> formDto) throws IllegalAccessException, InstantiationException {
        Field[] fields =formDto.getDeclaredFields();
         T obj = formDto.newInstance();
         if(fields!=null && fields.length>0){
             for(Field field:fields){
                 String name = field.getName();
                 String value = IaisFormHelper.getFormFieldData(bpc,formName,name);
                 if(!StringUtil.isEmpty(value)){
                     field.setAccessible(true);
                     field.set(obj,value);
                 }
             }
         }
         return obj;
     }
    /**
     * @description: add the ValidationResult messge to the Form
     *
     * @author: suocheng on 7/15/2019 4:17 PM
     * @param: [bpc, result]
     * @return: void
     */
    public static void addErrorToForm(BaseProcessClass bpc,String formName ,ValidationResult result){
        if(result.isHasErrors()){
            Map<String, String> errors = result.retrieveAll();
            for(Map.Entry<String,String> ent : errors.entrySet()){
               String key = ent.getKey();
               String value = ent.getValue();
               FormValidationHelper.addFieldErrorMessage(bpc.currentCase, formName, key, value);

            }

        }
    }
    private IFormValidatorHelper() {
        throw new IllegalStateException("Utility class");
    }
}
