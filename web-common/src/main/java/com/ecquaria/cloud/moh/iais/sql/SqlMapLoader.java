/*
 * This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.sql;

import com.ecquaria.cloud.moh.iais.common.utils.IaisCommonUtils;
import com.ecquaria.cloud.moh.iais.common.utils.MiscUtil;
import java.io.File;
import java.io.IOException;
import java.util.List;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.commons.collections.CollectionUtils;
import org.xml.sax.SAXException;

/**
 * SqlMapLoader
 *
 * @author Jinhua
 * @date 2019/7/18 17:49
 */
public class SqlMapLoader {
    private static final String SQL_DIR = "querySqls";

    /**
     * all the cached SQLs are loaded when server starts up by default.
     *
     * @param
     * @throws Exception
     */
    public void loadSqlMap() throws IOException, SAXException, ParserConfigurationException {
        File rootPath = new File(MiscUtil.getClassRootPath(), SQL_DIR);
        FolderFileList ffl = new FolderFileList(rootPath);
        List<String> files = ffl.getFiles();
        List<Sql> sqls = null;
        SqlXmlParser sxp = new SqlXmlParser();
        if (files != null) {
            sqls = IaisCommonUtils.genNewArrayList();
            for (String file : files) {
                List<Sql> sqlsInFile = sxp.parseSqlXml(file);
                if (!CollectionUtils.isEmpty(sqlsInFile)) {
                    sqls.addAll(sqlsInFile);
                }
            }
            SqlMap.INSTANCE.initSqlMap(sqls);
        }
    }

    public static class FolderFileList {
        private List<String> files;

        public FolderFileList(File rootPath) {
            files = IaisCommonUtils.genNewArrayList();
            listFilesForFolder(rootPath);
        }

        private void listFilesForFolder(File folder) {
            if (folder == null) {
                return;
            }
            File[] fileArrays = folder.listFiles();
            if (fileArrays == null || fileArrays.length == 0) {
                return;
            }
            for (File fileEntry : fileArrays) {
                if (fileEntry != null){
                    if (fileEntry.isDirectory()) {
                        listFilesForFolder(fileEntry);
                    } else {
                        if (fileEntry.getName().toLowerCase().endsWith(".xml")) {
                            files.add(fileEntry.getAbsolutePath());
                        }
                    }
                }
            }
        }

        public List<String> getFiles() {
            return files;
        }
    }
    public static String getDir() {
        return SQL_DIR;
    }
}
