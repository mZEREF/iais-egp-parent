/*
 * This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.sql;

import com.ecquaria.cloud.moh.iais.helper.IaisEGPHelper;
import sg.gov.moh.iais.common.constant.AppConsts;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

/**
 * SqlMapLoader
 *
 * @author Jinhua
 * @date 2019/7/18 17:49
 */
public class SqlMapLoader {
    private static final String SQL_DIR = "querySqls";

    /**
     * all the cached SQLs are loaded when server starts up by default.
     *
     * @param
     * @throws Exception
     */
    public void loadSqlMap() throws Exception {
        File rootPath = new File(IaisEGPHelper.getRootPath() + "WEB-INF" + AppConsts.FILE_SEPARATOR
                + "classes" + AppConsts.FILE_SEPARATOR, SQL_DIR);
        FolderFileList ffl = new FolderFileList(rootPath);
        List<String> files = ffl.getFiles();
        List<Sql> sqls = null;
        SqlXmlParser sxp = new SqlXmlParser();
        if (files != null) {
            sqls = new ArrayList<Sql>();
            for (String file : files) {
                List<Sql> sqlsInFile = sxp.parseSqlXml(file);
                if (sqlsInFile != null && sqlsInFile.size() > 0) {
                    sqls.addAll(sqlsInFile);
                }
            }
            SqlMap.INSTANCE.initSqlMap(sqls);
        }
    }

    public static class FolderFileList {
        private List<String> files;

        public FolderFileList(File rootPath) {
            files = new ArrayList<String>();
            listFilesForFolder(rootPath);
        }

        private void listFilesForFolder(File folder) {
            if (folder == null)
                return;

            File[] fileArrays = folder.listFiles();
            if (fileArrays == null || fileArrays.length == 0)
                return;

            for (File fileEntry : fileArrays) {
                if (fileEntry == null){
                    continue;
                } else {
                    if (fileEntry.isDirectory()) {
                        listFilesForFolder(fileEntry);
                    } else {
                        if (fileEntry.getName().toLowerCase().endsWith(".xml")) {
                            files.add(fileEntry.getAbsolutePath());
                        }
                    }
                }
            }
        }

        public List<String> getFiles() {
            return files;
        }
    }
    public static String getDir() {
        return SQL_DIR;
    }
}
