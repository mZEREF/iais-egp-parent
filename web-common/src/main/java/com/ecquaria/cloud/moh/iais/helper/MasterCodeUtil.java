/*
 * This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.helper;

import com.ecquaria.cloud.moh.iais.dto.MasterCodeDto;
import com.ecquaria.cloud.moh.iais.dto.SearchParam;
import com.ecquaria.cloud.moh.iais.dto.SearchResult;
import com.ecquaria.cloud.moh.iais.querydao.QueryDao;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.context.support.WebApplicationContextUtils;
import sg.gov.moh.iais.common.constant.AppConsts;
import sg.gov.moh.iais.common.utils.StringUtil;

import java.util.*;

/**
 * MasterCodeUtil
 *
 * @author Jinhua
 * @date 2019/7/25 16:20
 */
@Slf4j
public final class MasterCodeUtil {
    private static final String CACHE_NAME_CATEGORY         = "iaisMcCate";
    private static final String CACHE_NAME_FILTER           = "iaisMcFilter";

    /**
     * @description: refresh the master codes into cache
     *
     * @author: Jinhua on 2019/7/26 11:04
     * @param: []
     * @return: void
     */
    public static void refreshCache(QueryDao queryDao) {
        SearchParam param = new SearchParam(MasterCodeDto.class);
        param.setSort("sequence", SearchParam.ASCENDING);
        param.addParam("onlyActive", AppConsts.YES);
        SearchResult<MasterCodeDto> sr = queryDao.doQuery(param, "initializer", "retrieveAllMasterCodes");
        if (sr == null || sr.getRowCount() <= 0)
            return;

        Map<String, List<MasterCodeDto>> cateMap = new LinkedHashMap<>();
        Map<String, List<MasterCodeDto>> filterMap = new HashMap<>();
        List<MasterCodeDto> list = sr.getRows();
        list.forEach(mc -> {
            String cateStr = String.valueOf(mc.getCategory());
            if (cateMap.get(cateStr) == null) {
                List<MasterCodeDto> codes = new ArrayList<>();
                codes.add(mc);
                cateMap.put(cateStr, codes);
            } else {
                List<MasterCodeDto> codes = cateMap.get(cateStr);
                codes.add(mc);
            }
        });
        saveInCache(CACHE_NAME_CATEGORY, cateMap);
        list.forEach(mc -> {
            if (StringUtil.isEmpty(mc.getFilterValue())) {
                //Do nothing
            } else if (filterMap.get(mc.getFilterValue()) == null) {
                List<MasterCodeDto> codes = new ArrayList<>();
                codes.add(mc);
                filterMap.put(mc.getFilterValue(), codes);
            } else {
                List<MasterCodeDto> codes = filterMap.get(mc.getFilterValue());
                codes.add(mc);
            }
        });
        saveInCache(CACHE_NAME_FILTER, filterMap);
    }

    private static void saveInCache(String cacheName, Map<String, List<MasterCodeDto>> conMap) {
        RedisCacheHelper rch = RedisCacheHelper.getInstance();
        rch.clear(cacheName);
        conMap.entrySet().forEach(ent -> {
            rch.set(cacheName, ent.getKey(), ent.getValue());
        });
    }

    private MasterCodeUtil() {throw new IllegalStateException("Util class");}
}
