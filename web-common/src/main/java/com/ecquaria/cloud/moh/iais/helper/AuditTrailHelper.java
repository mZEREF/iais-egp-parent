/*
 * This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.helper;


import com.ecquaria.cloud.annotation.Delegator;
import com.ecquaria.cloud.helper.SpringContextHelper;
import com.ecquaria.cloud.job.executor.handler.annotation.JobHandler;
import com.ecquaria.cloud.moh.iais.common.constant.AppConsts;
import com.ecquaria.cloud.moh.iais.common.constant.AuditTrailConsts;
import com.ecquaria.cloud.moh.iais.common.dto.AuditTrailDto;
import com.ecquaria.cloud.moh.iais.common.utils.IaisCommonUtils;
import com.ecquaria.cloud.moh.iais.common.utils.MiscUtil;
import com.ecquaria.cloud.moh.iais.common.utils.ParamUtil;
import com.ecquaria.cloud.moh.iais.common.utils.StringUtil;
import com.ecquaria.cloud.moh.iais.service.client.AuditTrailWbClient;
import com.ecquaria.cloud.moh.iais.web.logging.util.AuditLogUtil;
import com.ecquaria.cloud.submission.client.wrapper.SubmissionClient;
import lombok.extern.slf4j.Slf4j;

import javax.servlet.http.HttpServletRequest;
import java.util.Collections;
import java.util.List;

/**
 * AuditTrailHelper
 *
 * @author Jinhua
 * @date 2019/8/6 17:58
 */
@Slf4j
public class AuditTrailHelper {

    public static void auditFunction(String moduleName, String functionName) {
        auditFunction(moduleName, functionName, null, null);
    }

    public static void auditFunctionWithAppNo(String moduleName, String functionName, String appNo) {
        auditFunction(moduleName, functionName, appNo, null);
    }

    public static void auditFunctionWithLicNo(String moduleName, String functionName, String licNo) {
        auditFunction(moduleName, functionName, null, licNo);
    }

    public static void auditFunction(String moduleName, String functionName, String appNo, String licenceNo) {
        HttpServletRequest request = MiscUtil.getCurrentRequest();
        AuditTrailDto dto = (AuditTrailDto) ParamUtil.getSessionAttr(request,
                AuditTrailConsts.SESSION_ATTR_PARAM_NAME);
        if (dto == null) {
            dto = new AuditTrailDto();
        }

        IaisEGPHelper.setAuditLoginUserInfo(dto);
        dto.setApplicationNum(appNo);
        dto.setLicenseNum(licenceNo);
        dto.setModule(moduleName);
        dto.setFunctionName(functionName);
        ParamUtil.setSessionAttr(request, AuditTrailConsts.SESSION_ATTR_PARAM_NAME, dto);
    }

    public static void setAuditAppNo(String appNo) {
        HttpServletRequest request = MiscUtil.getCurrentRequest();
        AuditTrailDto dto = (AuditTrailDto) ParamUtil.getSessionAttr(request, AuditTrailConsts.SESSION_ATTR_PARAM_NAME);
        dto.setApplicationNum(appNo);
    }

    public static void setAuditLicNo(String licNo) {
        HttpServletRequest request = MiscUtil.getCurrentRequest();
        AuditTrailDto dto = (AuditTrailDto) ParamUtil.getSessionAttr(request, AuditTrailConsts.SESSION_ATTR_PARAM_NAME);
        dto.setLicenseNum(licNo);
    }

    public static void callSaveAuditTrailByOperation(int operation){
        AuditTrailDto auditTrailDto = IaisEGPHelper.getCurrentAuditTrailDto();
        auditTrailDto.setOperation(operation);
        AuditTrailHelper.callSaveAuditTrail(auditTrailDto);
    }

    public static void directInsert(AuditTrailDto trailDto){
        AuditTrailWbClient trailWbClient = SpringContextHelper.getContext().getBean(AuditTrailWbClient.class);
        List<AuditTrailDto> list = Collections.singletonList(trailDto);
        trailWbClient.insertAuditTrail(list);
    }

    /**
     * save audit trail for param
     * @param auditTrailDto
     */
    public static void callSaveAuditTrail(AuditTrailDto auditTrailDto){
        SubmissionClient submissionClient = SpringContextHelper.getContext().getBean(SubmissionClient.class);
        List<AuditTrailDto> trailDtoList = IaisCommonUtils.genNewArrayList(1);
        trailDtoList.add(auditTrailDto);
        try {
            String eventRefNo = String.valueOf(System.currentTimeMillis());
            StringBuilder console = new StringBuilder();
            console.append("call event bus for ").append(auditTrailDto.getFunctionName()).append(" that the operation is  ").append(auditTrailDto.getOperation()).append(", the event ref number is ").append(eventRefNo);
            log.info(console.toString());
            AuditLogUtil.callWithEventDriven(trailDtoList, submissionClient, eventRefNo);
        } catch (Exception e) {
            log.error(e.getMessage(), e);
        }
    }

    public static AuditTrailDto getBatchJobDto(String domain, Object job) {
        AuditTrailDto dto = new AuditTrailDto();
        dto.setNricNumber("System");
        dto.setMohUserId("System");
        dto.setMohUserGuid(AppConsts.USER_ID_SYSTEM);
        dto.setUserDomain(domain);

        if (job != null){
            log.info(StringUtil.changeForLog("batch job class " + job.getClass().getName()));
            JobHandler handler = job.getClass().getAnnotation(JobHandler.class);
            if (handler != null){
                log.info(StringUtil.changeForLog("handler value" + handler.value()));
                dto.setEntityId(handler.value());
            }else {
                Delegator delegator = job.getClass().getAnnotation(Delegator.class);
                if(delegator != null){
                    log.info(StringUtil.changeForLog("delegator value" + delegator.value()));
                    dto.setEntityId(delegator.value());
                }
            }
        }
        log.info(StringUtil.changeForLog("batch job function name" + dto.getFunctionName()));
        dto.setFunctionName("Batch Job");
        dto.setOperationType(AuditTrailConsts.OPERATION_TYPE_BATCH_JOB);
        AuditTrailDto.setThreadDto(dto);
        return dto;
    }

    public static AuditTrailDto getBatchJobDto(String domain) {
        return getBatchJobDto(domain, null);
    }

    private AuditTrailHelper() {
        throw new IllegalStateException("Utility class");
    }
}
