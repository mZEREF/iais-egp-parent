/*
 * This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.helper;

import com.ecquaria.cloud.helper.SpringContextHelper;
import com.ecquaria.cloud.moh.iais.common.constant.AppConsts;
import com.ecquaria.cloud.moh.iais.common.dto.AuditTrailDto;
import com.ecquaria.cloud.moh.iais.common.dto.organization.OrgUserDto;
import com.ecquaria.cloud.moh.iais.common.utils.MiscUtil;
import com.ecquaria.cloud.moh.iais.common.utils.ParamUtil;
import com.ecquaria.cloud.moh.iais.dto.LoginContext;
import com.ecquaria.cloud.moh.iais.service.client.ComSystemAdminClient;
import sop.iwe.SessionManager;
import sop.rbac.user.User;

import javax.servlet.http.HttpServletRequest;
import java.util.List;

/**
 * AccessUtil
 *
 * @author suocheng
 * @date 7/23/2019
 */

public class AccessUtil {
    /**
     * @description: judge is the Backend .
     *
     * @author: suocheng on 7/23/2019 2:49 PM
     * @param: []
     * @return: boolean
     */
    public static boolean isBackend() {
        return false;
    }
    /**
     * @description: judge is the Frontend
     *
     * @author: suocheng on 7/23/2019 2:50 PM
     * @param: []
     * @return: boolean
     */
    public static boolean isFrontend() {
        return true;
    }

   /**
   * @description: judge is the administrator
   * @param: 
   * @return: 
   * @author: yichen 
   */
    public static boolean isAdministrator(){
        return true;
    }

    public static boolean isSpecifiedRole(String role) {
        HttpServletRequest request = MiscUtil.getCurrentRequest();
        if (request == null) {
            return false;
        }

        LoginContext loginContext = (LoginContext) ParamUtil.getSessionAttr(request, AppConsts.SESSION_ATTR_LOGIN_USER);

        return role.equals(loginContext.getCurRoleId());
    }

    private AccessUtil() {
        throw new IllegalStateException("Utility class");
    }

    /**
    * @description: use for judeg is intranet user
    * @param: 
    * @return: 
    * @author: yichen 
    */
    public static Boolean isIntranet(AuditTrailDto currentAuditTrail){
        String userDomain = currentAuditTrail.getUserDomain();
        if ("Intranet".equals(userDomain)){
            return true;
        }else {
            return false;
        }
    }

    /**
    * @description: use for judeg is internet user
    * @param:
    * @return:
    * @author: yichen
    */
    public static Boolean isInternet(AuditTrailDto currentAuditTrail){
        String userDomain = currentAuditTrail.getUserDomain();
        if ("Internet".equals(userDomain)){
            return true;
        }else {
            return false;
        }
    }

    public static void initLoginUserInfo(HttpServletRequest request) {
        LoginContext loginContext = new LoginContext();
        User user = SessionManager.getInstance(request).getCurrentUser();
        ComSystemAdminClient client = SpringContextHelper.getContext().getBean(ComSystemAdminClient.class);
        OrgUserDto orgUser = client.retrieveOrgUserAccount(user.getId()).getEntity();
        if (orgUser != null) {
            loginContext.setUserId(orgUser.getId());
            loginContext.setLoginId(user.getId());
            loginContext.setUserDomain(user.getUserDomain());
            List<String> wrkGrps = client.getWorkGrpsByUserId(orgUser.getId()).getEntity();
            if (wrkGrps != null && !wrkGrps.isEmpty()) {
                loginContext.getWrkGrpIds().addAll(wrkGrps);
            }
            List<String> userRoles = client.retrieveUserRoles(orgUser.getId()).getEntity();
            if (userRoles != null && !userRoles.isEmpty()) {
                loginContext.getRoleIds().addAll(userRoles);
                loginContext.setCurRoleId(userRoles.get(0));
            }
        }
        ParamUtil.setSessionAttr(request, AppConsts.SESSION_ATTR_LOGIN_USER, loginContext);
    }
}
