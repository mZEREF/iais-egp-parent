/*
 * This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.helper;

import com.ecquaria.cloud.helper.SpringContextHelper;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Spy;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.mockpolicies.Slf4jMockPolicy;
import org.powermock.core.classloader.annotations.MockPolicy;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.powermock.reflect.Whitebox;
import org.springframework.context.ApplicationContext;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.data.redis.serializer.RedisSerializer;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import static org.junit.Assert.assertNotNull;
import static org.powermock.api.mockito.PowerMockito.*;

/**
 * RedisCacheHelperTest
 *
 * @author Jinhua
 * @date 2019/7/31 16:59
 */
@RunWith(PowerMockRunner.class)
@MockPolicy(Slf4jMockPolicy.class)
@PrepareForTest({RedisCacheHelper.class, SpringContextHelper.class})
public class RedisCacheHelperTest {
    private static final String KEY = "cname:key";
    private static final String VALUE = "value";
    private static final long EXPIRE = 60 * 30;
    @Spy
    private RedisCacheHelper rch = new RedisCacheHelper();
    @Mock
    private RedisTemplate<String, Object> redisTemplate;
    @Mock
    private ValueOperations vo;
    @Mock
    private RedisSerializer rs;

    @Before
    public void setup() throws Exception {
        Whitebox.setInternalState(rch, "redisTemplate", redisTemplate);
        doReturn(vo).when(redisTemplate).opsForValue();
        doReturn(false).when(redisTemplate).expire(KEY, EXPIRE, TimeUnit.SECONDS);
        doReturn(rs).when(redisTemplate).getValueSerializer();
        byte[] seri = VALUE.getBytes();
        doReturn(seri).when(rs).serialize(VALUE);
        doNothing().when(vo).set(KEY, seri);
    }

    @Test
    public void testGetInstance() {
        PowerMockito.mockStatic(SpringContextHelper.class);
        ApplicationContext context = PowerMockito.mock(ApplicationContext.class);
        when(SpringContextHelper.getContext()).thenReturn(context);
        doReturn(rch).when(context).getBean(RedisCacheHelper.class);
        RedisCacheHelper r = RedisCacheHelper.getInstance();
        assertNotNull(r);
    }

    @Test
    public void testSet() {
        rch.set(KEY, VALUE);
        rch.set("cname", "key", VALUE);
        rch.set("cname", "key", VALUE, EXPIRE);
        assertNotNull(rch);
    }

    @Test
    public void testGet() {
        rch.get(KEY);
        rch.get(KEY, EXPIRE);
        rch.get("cname", "key");
        assertNotNull(rch);
    }

    @Test
    public void testDelete() {
        doNothing().when(redisTemplate).delete(KEY);
        rch.delete(KEY);
        rch.delete("cname", "key");
        Set<String> keys = new HashSet<>();
        keys.add(KEY);
        doReturn(keys).when(redisTemplate).keys("cname:");
        rch.clear("cname");
        assertNotNull(rch);
    }
}
