/*
 * This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.sql;

import freemarker.template.TemplateException;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Spy;
import org.powermock.api.mockito.mockpolicies.Slf4jMockPolicy;
import org.powermock.core.classloader.annotations.MockPolicy;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import sg.gov.moh.iais.common.constant.AppConsts;
import sg.gov.moh.iais.common.exception.IaisRuntimeException;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertNotNull;

/**
 * SqlMapTest
 *
 * @author Jinhua
 * @date 2019/7/22 9:40
 */
@RunWith(PowerMockRunner.class)
@MockPolicy(Slf4jMockPolicy.class)
@PrepareForTest({SqlMapTest.class})
@PowerMockIgnore("javax.management.*")
public class SqlMapTest {
    @Spy
    private SqlMap sm = SqlMap.INSTANCE;

    private static final String CATA     = "test.cate";
    private static final String KEY_1    = "test.key";
    private static final String KEY_D    = "test.key.dym";

    @Before
    public void setup() {
        List<Sql> sqlList = new ArrayList<>();
        Sql sql = new Sql();
        sql.setCached(AppConsts.NO);
        sql.setSql("Select * from AAA");
        sql.setKey(KEY_1);
        sql.setCatalog(CATA);
        sqlList.add(sql);
        sql = new Sql();
        sql.setSql("selct dad <#if nric_no??>   dafdsa </#if>");
        sql.setKey(KEY_D);
        sql.setCatalog(CATA);
        sqlList.add(sql);
        sm.initSqlMap(sqlList);
    }

    @Test
    public void testGetSql() {
        Sql s = sm.getSql(CATA, KEY_1);
        assertNotNull(s);
    }

    @Test(expected = IaisRuntimeException.class)
    public void testGetSqlExp() {
        Sql s = sm.getSql(CATA, "ddccss");
    }

    @Test
    public void testGetSqlParam() throws IOException, TemplateException {
        Map<String, Serializable> param = new HashMap<>();
        param.put("nric_no", "dsas");
        String s = sm.getSql(CATA, KEY_D, param);
        assertNotNull(s);
    }

    @Test
    public void testGetDynamicSqlStat() throws IOException, TemplateException {
        Map<String, Object> param = new HashMap<>();
        param.put("nric_no", "dsas");
        Sql sql = sm.getSql(CATA, KEY_1);
        sm.getDynamicSqlStat(sql, param);
        sql = sm.getSql(CATA, KEY_D);
        String s = sm.getDynamicSqlStat(sql, param);
        assertNotNull(s);
    }
}
