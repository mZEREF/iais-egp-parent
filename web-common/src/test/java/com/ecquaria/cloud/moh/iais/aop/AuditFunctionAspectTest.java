/*
 *   This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.aop;

/**
 * AuditFunctionAspectTest.java
 *
 * @author Jinhua
 * @date 2019/7/4 13:46
 */
/*@RunWith(PowerMockRunner.class)
@PowerMockRunnerDelegate(SpringJUnit4ClassRunner.class)
@MockPolicy(Slf4jMockPolicy.class)
@PowerMockIgnore("javax.management.*")
@PrepareForTest({AuditFunctionAspect.class, MiscUtil.class, AuditLogUtil.class})
@ContextConfiguration("classpath*:spring-config.xml")*/
public class AuditFunctionAspectTest {
   /* @Autowired
    @InjectMocks
    private TestFunctionTrack tft;
    @Autowired
    @InjectMocks
    TestNonFunctionTrack tnf;

    @Autowired
    ApplicationContext applicationContext;

    @Autowired
    private AuditFunctionAspect aspect;

    private MockHttpServletRequest request = null;
    private SessionManager.LoginInformation lif;

    @Before
    public void setup() throws Exception {
        request = new MockHttpServletRequest();
        MockitoAnnotations.initMocks(this);

        User user = new User();
        user.setId("Test User");
        user.setUserDomain(AppConsts.USER_DOMAIN_INTRANET);
        lif = new SessionManager.LoginInformation();
        lif.setUser(user);
        request.getSession().setAttribute(SessionManager.SOP_LOGIN_INFO, lif);
        request.addHeader("User-Agent", "firefox");
        PowerMockito.mockStatic(MiscUtil.class);
        PowerMockito.when(MiscUtil.getCurrentRequest()).thenReturn(request);
    }

    @Test
    public void testAround() throws Exception {
        PowerMockito.mockStatic(AuditLogUtil.class);
        List<AuditTrailDto> adList = IaisCommonUtils.genNewArrayList();
        doNothing().when(AuditLogUtil.class, "callAuditRestApi", adList);
        AopTestUtils.getTargetObject(tft);
        SearchParam param = new SearchParam(tft.getClass().getName());
        Map<String, Object> filters = param.getFilters();
        filters.put("aaaa", "bbbb");
        tft.searchForSomething(param);
        assertNotNull(tft);
    }

    @Test
    public void testNon() throws Exception {
        PowerMockito.mockStatic(AuditLogUtil.class);
        List<AuditTrailDto> adList = IaisCommonUtils.genNewArrayList();
        doNothing().when(AuditLogUtil.class, "callAuditRestApi", adList);
        AopTestUtils.getTargetObject(tnf);
        tnf.test();
        assertNotNull(tnf);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testAuditFunction() {
        aspect.auditFunction();
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testAuditClass() {
        aspect.auditClass();
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testAuditAuditSearch() {
        aspect.auditSearch();
    }

    @Test
    public void testException() {
        AopTestUtils.getTargetObject(tnf);
        tnf.test();
        assertNotNull(tnf);
    }*/
}
