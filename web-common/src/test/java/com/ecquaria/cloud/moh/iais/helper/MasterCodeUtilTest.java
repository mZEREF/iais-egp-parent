/*
 * This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.helper;

import com.ecquaria.cloud.moh.iais.common.dto.SearchResult;
import com.ecquaria.cloud.moh.iais.common.dto.SelectOption;
import com.ecquaria.cloud.moh.iais.common.dto.mastercode.MasterCodeView;
import com.ecquaria.cloud.moh.iais.common.utils.RestApiUtil;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.mockpolicies.Slf4jMockPolicy;
import org.powermock.core.classloader.annotations.MockPolicy;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
import org.powermock.modules.junit4.PowerMockRunner;
import org.powermock.reflect.Whitebox;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Matchers.anyObject;
import static org.mockito.Matchers.anyString;
import static org.powermock.api.mockito.PowerMockito.doNothing;
import static org.powermock.api.mockito.PowerMockito.when;

/**
 * MasterCodeUtilTest
 *
 * @author Jinhua
 * @date 2019/7/30 9:28
 */
@RunWith(PowerMockRunner.class)
@MockPolicy(Slf4jMockPolicy.class)
@PrepareForTest({MasterCodeUtil.class, RedisCacheHelper.class, QueryHelp.class, RestApiUtil.class})
@SuppressStaticInitializationFor("com.ecquaria.cloud.moh.iais.helper.MasterCodeUtil")
@PowerMockIgnore("javax.management.*")
public class MasterCodeUtilTest {
    @Mock
    private RedisCacheHelper rch;

    @Before
    public void setup() {
        PowerMockito.mockStatic(RedisCacheHelper.class);
        PowerMockito.mockStatic(QueryHelp.class);
        PowerMockito.mockStatic(RestApiUtil.class);
        when(RedisCacheHelper.getInstance()).thenReturn(rch);
        doNothing().when(rch).set(anyString(), anyString(), anyObject());
        SearchResult<MasterCodeView> sr = new SearchResult<>();
        List<MasterCodeView> list = new ArrayList<>();
        MasterCodeView dto = new MasterCodeView();
        dto.setCategory("1");
        dto.setFilterValue("E");
        dto.setCode("E02");
        dto.setDescription("Error 02");
        list.add(dto);
        dto = new MasterCodeView();
        dto.setCategory("1");
        dto.setFilterValue("E");
        dto.setCode("E01");
        dto.setDescription("Error 01");
        list.add(dto);dto = new MasterCodeView();
        dto.setCategory("1");
        dto.setCode("E03");
        dto.setDescription("Error 03");
        list.add(dto);
        sr.setRows(list);
        sr.setRowCount(list.size());
        when(RestApiUtil.query(anyObject(),anyObject())).thenReturn(sr);
    }

    @Test(expected = IllegalStateException.class)
    public void testConstructor() throws IllegalAccessException, InvocationTargetException, InstantiationException {
        Constructor<MasterCodeUtil> con = Whitebox.getConstructor(MasterCodeUtil.class, null);
        con.newInstance(null);
    }

    @Test
    public void testRefreshCache() {
        MasterCodeUtil.refreshCache();
        assertNotNull(MasterCodeUtil.retrieveOptionsByCate("1"));
        when(RestApiUtil.query(anyObject(),anyObject())).thenReturn(null);
        MasterCodeUtil.refreshCache();
    }

    @Test
    public void testGetCategoryId() {
        String a = MasterCodeUtil.getCategoryId("CATE_ID_NATIONALITY");
        String b = MasterCodeUtil.getCategoryId(MasterCodeUtil.CATE_ID_NATIONALITY);
        assertEquals(a, b);
    }

    @Test
    public void testRetrieveByCategory() {
        List<MasterCodeView> list = MasterCodeUtil.retrieveByCategory("1");
        assertNotNull(list);
        SearchResult sr = new SearchResult();
        when(RestApiUtil.query(anyObject(),anyObject())).thenReturn(sr);
        MasterCodeUtil.retrieveByCategory("1");
    }

    @Test
    public void testRetrieveOptionsByCate() {
        List<SelectOption> list = MasterCodeUtil.retrieveOptionsByCate("1");
        assertNotNull(list);
    }

    @Test
    public void testRetrieveByFilter() {
        List<MasterCodeView> list = MasterCodeUtil.retrieveByFilter("E");
        assertNotNull(list);
        SearchResult sr = new SearchResult();
        when(RestApiUtil.query(anyObject(),anyObject())).thenReturn(sr);
        MasterCodeUtil.retrieveByFilter("E");
    }

    @Test
    public void testRetrieveOptionsByFilter() {
        List<SelectOption> list = MasterCodeUtil.retrieveOptionsByFilter("E");
        assertNotNull(list);
    }

    @Test
    public void testGetCodeDesc() {
        String desc = MasterCodeUtil.getCodeDesc("E02");
        assertNotNull(desc);
        SearchResult sr = new SearchResult();
        when(RestApiUtil.query(anyObject(),anyObject())).thenReturn(sr);
        MasterCodeUtil.getCodeDesc("E02");
    }

    @Test
    public void testRetrieveOptionsByCodes() {
        String[] strs = new String[]{"E02", "E01"};
        List<SelectOption> list = MasterCodeUtil.retrieveOptionsByCodes(strs);
        assertNotNull(list);
        SearchResult sr = new SearchResult();
        when(RestApiUtil.query(anyObject(),anyObject())).thenReturn(sr);
        MasterCodeUtil.retrieveOptionsByCodes(strs);
        MasterCodeUtil.retrieveOptionsByCodes(null);
    }
}
