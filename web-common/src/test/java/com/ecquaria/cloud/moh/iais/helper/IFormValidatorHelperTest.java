/*
 *   This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.helper;

import com.ecquaria.cloud.moh.iais.common.validation.dto.ValidationResult;
import com.ecquaria.cloud.moh.iais.dto.IFormValidatorHelperTestDto;
import com.ecquaria.egp.core.bat.FormHelper;
import com.ecquaria.egp.core.forms.validation.FormValidationHelper;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.mockpolicies.Slf4jMockPolicy;
import org.powermock.core.classloader.annotations.MockPolicy;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
import org.powermock.modules.junit4.PowerMockRunner;
import sop.webflow.rt.api.BaseProcessClass;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;

/**
 * IFormValidatorHelperTest
 *
 * @author suocheng
 * @date 7/15/2019
 */

@RunWith(PowerMockRunner.class)
@MockPolicy(Slf4jMockPolicy.class)
@PrepareForTest({WebValidationHelper.class,FormHelper.class,IFormValidatorHelper.class,FormValidationHelper.class})
@PowerMockIgnore("javax.management.*")
@SuppressStaticInitializationFor("sg.gov.moh.iais.common.validation.ValidationUtils")
public class IFormValidatorHelperTest {

    @Mock
    private BaseProcessClass bpc;

    @Mock
    private ValidationResult result;

    @Before
    public void setup(){
        PowerMockito.mockStatic(FormHelper.class);
        PowerMockito.mockStatic(WebValidationHelper.class);
        PowerMockito.mockStatic(FormValidationHelper.class);
    }

    //validateForm
    @Test
    public void testvalidateForm() throws Exception {
        PowerMockito.when(FormHelper.getFormFieldData(bpc,"formName","age")).thenReturn("Test");
        IFormValidatorHelperTestDto iFormValidatorHelperTestDto = new IFormValidatorHelperTestDto();
        IFormValidatorHelper.validateForm(bpc,"formName",IFormValidatorHelperTestDto.class,false);
    }

    //addErrorToForm
    @Test
    public void testaddErrorToForm(){
        Map<String,String> errors = new HashMap<String,String>();
        errors.put("fieldName","ErrorMessage");
        PowerMockito.doReturn(true).when(result).isHasErrors();
        PowerMockito.doReturn(errors).when(result).retrieveAll();
        IFormValidatorHelper.addErrorToForm(bpc,"formName",result);
        Assert.assertTrue(true);
    }
    @Test(expected = IllegalStateException.class)
    public void testConstructor() throws NoSuchMethodException, IllegalAccessException,
            InvocationTargetException, InstantiationException {
        Class cls = IFormValidatorHelper.class;
        Constructor<IFormValidatorHelper> con = cls.getDeclaredConstructor(null);
        con.setAccessible(true);
        con.newInstance(null);
    }
}
