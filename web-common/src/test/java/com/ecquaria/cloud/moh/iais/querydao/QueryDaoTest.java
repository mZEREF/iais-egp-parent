/*
 * This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.querydao;

import com.ecquaria.cloud.moh.iais.dto.SearchParam;
import com.ecquaria.cloud.moh.iais.dto.SearchResult;
import com.ecquaria.cloud.moh.iais.helper.SqlHelperTest;
import com.ecquaria.cloud.moh.iais.sql.SqlMap;
import com.ecquaria.cloud.moh.iais.sql.SqlMapLoader;
import freemarker.template.TemplateException;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Spy;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.mockpolicies.Slf4jMockPolicy;
import org.powermock.core.classloader.annotations.MockPolicy;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.powermock.reflect.Whitebox;
import sg.gov.moh.iais.common.exception.IaisRuntimeException;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertNotNull;
import static org.mockito.Matchers.anyObject;
import static org.mockito.Matchers.anyString;
import static org.powermock.api.mockito.PowerMockito.when;

/**
 * QueryDaoTest
 *
 * @author Jinhua
 * @date 2019/7/23 10:07
 */
@RunWith(PowerMockRunner.class)
@MockPolicy(Slf4jMockPolicy.class)
@PrepareForTest({QueryDao.class, SqlMap.class})
@PowerMockIgnore("javax.management.*")
public class QueryDaoTest {
    @Spy
    private QueryDao dao = new QueryDao();

    @Mock
    private EntityManager entityManager;
    @Mock
    private Query query;

    @Before
    public void setup() throws Exception {
        SqlMapLoader sqlMapLoader = new SqlMapLoader();
        sqlMapLoader.loadSqlMap();
        Whitebox.setInternalState(dao, "entityManager", entityManager);
        when(entityManager.createNativeQuery(anyString(), (Class) anyObject())).thenReturn(query);
        List<QueryDao> list = new ArrayList<>();
        list.add(new QueryDao());
        when(query.getResultList()).thenReturn(list);
        when(query.getSingleResult()).thenReturn(14);
    }

    @Test
    public void testDoQuery() {
        SearchParam sp = new SearchParam(QueryDao.class);
        dao.doQuery(sp, "testSqlMap2", "searchNothing2");
        sp.addSortField("aaaa");
        sp.setPageSize(10);
        sp.setPageNo(1);
        sp.addFilter("as", "dd", true);
        SearchResult rs = dao.doQuery(sp, "testSqlMap2", "searchNothing2");
        assertNotNull(rs);
    }

    @Test(expected = IaisRuntimeException.class)
    public void testDoQueryExp() throws IOException, TemplateException {
        SearchParam sp = new SearchParam(QueryDao.class);
        SqlMap sm = PowerMockito.mock(SqlMap.class);
        Whitebox.setInternalState(SqlMap.class, "INSTANCE", sm);
        when(sm.getSql("testSqlMap233", "searchNothing233", sp.getParams()))
                .thenThrow(new IOException());
        dao.doQuery(sp, "testSqlMap233", "searchNothing233");
    }

    @Test(expected = IaisRuntimeException.class)
    public void testGetSqlExp() {
        SearchParam sp = new SearchParam(SqlHelperTest.class);
        sp.setPageSize(10);
        dao.doQuery(sp,"testSqlMap2", "searchNothing2");
    }
}
