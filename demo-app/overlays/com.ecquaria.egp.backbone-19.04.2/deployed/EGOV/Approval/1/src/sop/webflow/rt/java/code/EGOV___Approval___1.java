/**
 * Generated by SIT
 *
 * Feel free to add  methods  or comments. The content of this 
 * file will be kept as-is when committed.
 *
 * Extending this  class is not recommended , since the class-
 * name will change together with the version. Calling methods
 * from external code is not recommended as well , for similar
 * reasons.
 */
package sop.webflow.rt.java.code;

import com.ecquaria.egov.core.common.constants.AppConstants;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import sop.i18n.MultiLangUtil;
import sop.util.MessageTemplateHelper;
import sop.webflow.rt.api.BaseProcessClass;

import com.ecquaria.egov.core.svcreg.ServiceRegistry;
import com.ecquaria.egp.api.AppStatus;
import com.ecquaria.egp.core.application.AppInParam;
import com.ecquaria.egp.core.application.AppOutParam;
import com.ecquaria.egp.core.application.Application;
import com.ecquaria.egp.core.bat.AppStatusHelper;
import com.ecquaria.egp.core.bat.BATControllerHelper;

import ecq.commons.exception.BaseRuntimeException;
import ecq.commons.helper.StringHelper;
import ecq.commons.exception.BaseException;

public class EGOV___Approval___1 extends BaseProcessClass {

    /**
     * 
     */
    private static final long serialVersionUID = 8147760078573532131L;

    public static final String ATTR_PREFIX = "Process_Approval";
    public static final String ATTR_NEW_APP_STATUS = ATTR_PREFIX + "_NEW_APP_STATUS";
    public static final String ATTR_TASK_ID = ATTR_PREFIX + "_TASK_ID";

    public static final String STEP_APPROVAL_TASK = "PrepareTask";

    public static final String STEP_APPROVAL_SUSPEND = "DoPendingSuspendStatus";
    public static final String STEP_APPROVAL_UPDATE = "DoPendingUpdateStatus";

    public static final String STAGE_NAME = "approval";

    public static final String KEY_UPDATE_STATUS_APPROVAL = "message";

    public static final String KEY_EGP_APP_UPDATE_STATUS_APPROVAL = "egp.app.update.status.approval";
    public static final String MESSAGE_UPDATE_STATUS_APPROVAL = "Application:{0} has been updated from {1} to {2} successfully.";

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    public void start_OnStepProcess_0() throws Exception {
//        String caseid = request.getParameter("caseid");
//        copyCaseData(caseid);
//        System.out.println("copy case id: " + caseid);
    }

    public void prepareTask_OnStepProcess_0() throws Exception {
        long taskId = BATControllerHelper.getTaskId(this);
        if (taskId < 0) {
            throw new BaseRuntimeException("Invalid parameter[taskid] in request");
        }

        if (!BATControllerHelper.checkCase(this)) {
            throw new BaseRuntimeException("Broken case");
        }

        getSession().setAttribute(ATTR_TASK_ID, taskId);
    }

    public void prepare_OnStepProcess_0() throws Exception {
        BATControllerHelper.prepareApplicationView(this, STAGE_NAME);

        // save tab index back
        AppInParam appInParam = BATControllerHelper.getAppInParam(this);
        AppOutParam appOutParam = BATControllerHelper.getAppOutParam(this);
        appInParam.setSelectedPage(appOutParam.getSelectedPage());

        appInParam.setMessage(appOutParam.getMessage());
        String message = appInParam.getMessage();
        if (!StringHelper.isEmpty(message)) {
            request.setAttribute(KEY_UPDATE_STATUS_APPROVAL, message);
        }
    }

    public void bindStatusType_OnStepProcess_0() throws Exception {
        AppStatus appStatus = BATControllerHelper.getSubmittedAppStatus(this);
        request.setAttribute("appStatusType", appStatus.getType());
        request.setAttribute(ATTR_NEW_APP_STATUS, appStatus);
    }

    private void updateStatus(String tokenComp) throws BaseException {
        AppStatus newStatus = (AppStatus) request.getAttribute(ATTR_NEW_APP_STATUS);
        AppStatus oldStatus = BATControllerHelper.getCurrentAppStatus(this);
        if (oldStatus.getCode().equals(newStatus.getCode())) {
            throw new BaseRuntimeException("The status has been changed to " + oldStatus.getLabel());
        }
        try {
            BATControllerHelper.updateAppStatus(this, newStatus.getCode(), tokenComp);
        }catch (Exception e){
            throw new BaseException(e);
        }

        if (logger.isDebugEnabled()) {
            logger.debug("Application new status: " + newStatus);
        }

        AppOutParam appOutParam = BATControllerHelper.getAppOutParam(this);
        AppInParam appInParam = BATControllerHelper.getAppInParam(this);
        Application app = appInParam.getApplication();
        if (app != null) {
            String appNo = app.getAppNo();
            String oldDisplayStatus = oldStatus.getExternalLabel();
            String newDisplayStatus = newStatus.getExternalLabel();
            String message = MessageTemplateHelper.getMessage(KEY_EGP_APP_UPDATE_STATUS_APPROVAL,
                    new String[] { appNo, MultiLangUtil.translate(request, AppConstants.KEY_TRANSLATION_MODULE_LABEL,oldDisplayStatus), MultiLangUtil.translate(request, AppConstants.KEY_TRANSLATION_MODULE_LABEL,newDisplayStatus) },
                    MESSAGE_UPDATE_STATUS_APPROVAL);
            appOutParam.setMessage(message);
        }

    }

    private void completeTask() {
        Long taskId = (Long) getSession().getAttribute(ATTR_TASK_ID);
        if (null != taskId) {
            BATControllerHelper.completeTask(taskId);
            getSession().setAttribute(ATTR_TASK_ID, null);
        }
    }

    public void complete_OnStepProcess_0() throws Exception {
        updateStatus(null);
        completeTask();
    }

    public void pendingUpdateStatus_OnStepProcess_0() throws Exception {
        updateStatus(STEP_APPROVAL_UPDATE);
        completeTask();
    }

    public void pendingApproval_OnStepProcess_1() throws Exception {
        pendingDefault();
    }

    public void sendTask() throws Exception {
        BATControllerHelper.sendTask(this, STAGE_NAME, true);
        BATControllerHelper.invokeReturnStep(this);
    }

    public void autoPendingUpdate_OnStepProcess_0() throws Exception {
        AppStatus newStatus = (AppStatus) request.getAttribute(ATTR_NEW_APP_STATUS);
        AppStatus oldStatus = BATControllerHelper.getCurrentAppStatus(this);
        if (null == newStatus) {
            newStatus = AppStatusHelper.getInstance().getAppStatus(oldStatus.getNextStatus());
        }
        
        if (null == newStatus) {
            // if null, use default URL as task URL
            pendingDefault();
            sendSuspendTask();
            return;
        }
        
        if (oldStatus.getCode().equals(newStatus.getCode())) {
            throw new BaseRuntimeException("The status has been " + oldStatus.getLabel());
        }
        
        if (StringHelper.isEmpty(newStatus.getNextStatus())) {
            BATControllerHelper.updateAppStatus(this, newStatus.getCode());

        } else {
            BATControllerHelper.updateAppStatus(this, newStatus.getCode(), STEP_APPROVAL_UPDATE);
        }
        
    }

    private void sendSuspendTask(){
        String continueUrl = BATControllerHelper
                .generateContinueUrl(this, STEP_APPROVAL_TASK, false);

        if (BATControllerHelper.isStickyness()) {
            BATControllerHelper.sendStickynessTask(this, continueUrl);

        } else {
            BATControllerHelper.sendTask(this, STAGE_NAME, continueUrl);
        }
    }
    
    private void pendingDefault() throws BaseException{
        ServiceRegistry svcReg = BATControllerHelper.getServiceInfo(this);
        String processingType = svcReg.getProcessFlow().getName();
        AppStatus newStatus = AppStatusHelper.getInstance().getDefaultStatus(processingType,
                STAGE_NAME);
        try{
            BATControllerHelper.updateAppStatus(this, newStatus.getCode());
        }catch (Exception e){
            throw  new BaseException(e);
        }

    }

    public void stop_OnStepProcess_0() throws Exception {
        BATControllerHelper.invokeReturnStep(this);
    }

}
