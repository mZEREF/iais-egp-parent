/*
 *   This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.test.action;

import com.ecquaria.cloud.moh.iais.dto.SearchResult;
import com.ecquaria.cloud.moh.iais.helper.CrudHelper;
import com.ecquaria.cloud.moh.iais.querydao.QueryDao;
import com.ecquaria.cloud.moh.iais.test.dao.OrgUserAccountDao;
import com.ecquaria.cloud.moh.iais.test.entity.DemoQuery;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import sop.webflow.rt.api.BaseProcessClass;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

/**
 * OrgUserAccountDelegatorTest
 *
 * @author suocheng
 * @date 7/31/2019
 */
@RunWith(PowerMockRunner.class)
@PrepareForTest({OrgUserAccountDelegator.class,CrudHelper.class})
public class OrgUserAccountDelegatorTest {
    @InjectMocks
    private OrgUserAccountDelegator orgUserAccountDelegator;
    @Mock
    private BaseProcessClass bpc;
    @Mock
    private HttpServletRequest request;
    @Mock
    private HttpSession session;
    @Mock
    private QueryDao<DemoQuery> demoQueryDao;
    @Mock
    private SearchResult searchResult;
    @Mock
    private OrgUserAccountDao orgUserAccountDao;
    @Before
    public void setup(){
        bpc.request=request;
        PowerMockito.when(request.getSession()).thenReturn(session);
        PowerMockito.mockStatic(CrudHelper.class);
        PowerMockito.doNothing().when(orgUserAccountDao).delete(Mockito.anyInt());
    }

    @Test
    public void testdoStart(){
        orgUserAccountDelegator.doStart(bpc);
        Assert.assertTrue(true);
    }

    @Test
    public void testprepareDatat(){
        PowerMockito.when(demoQueryDao.doQuery(Mockito.anyObject(),Mockito.anyString(),Mockito.anyString())).thenReturn(searchResult);
        orgUserAccountDelegator.prepareData(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testprepareSwitch(){
        orgUserAccountDelegator.prepareSwitch(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoSearch(){
        PowerMockito.when(request.getParameter(Mockito.anyString())).thenReturn("0");
        PowerMockito.when(request.getParameterValues(Mockito.anyString())).thenReturn(new String[] {"pending"});
        orgUserAccountDelegator.doSearch(bpc);
        Assert.assertTrue(true);
    }

    @Test
    public void testdoSorting(){
        orgUserAccountDelegator.doSorting(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoPaging(){
        orgUserAccountDelegator.doPaging(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoDelete(){
        PowerMockito.when(request.getParameter(Mockito.anyString())).thenReturn("0");
        orgUserAccountDelegator.doDelete(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testprepareCreateData(){
        orgUserAccountDelegator.prepareCreateData(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoCreate(){
        PowerMockito.when(request.getParameter("crud_action_type")).thenReturn("save");
        orgUserAccountDelegator.doCreate(bpc);
        Assert.assertTrue(true);
    }
}
