/*
 *   This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.action;

import com.ecquaria.cloud.moh.iais.common.dto.SearchResult;
import com.ecquaria.cloud.moh.iais.common.utils.MiscUtil;
import com.ecquaria.cloud.moh.iais.common.utils.ParamUtil;
import com.ecquaria.cloud.moh.iais.common.utils.RestApiUtil;
import com.ecquaria.cloud.moh.iais.common.validation.dto.ValidationResult;
import com.ecquaria.cloud.moh.iais.dto.OrgUserAccountDto;
import com.ecquaria.cloud.moh.iais.helper.CrudHelper;
import com.ecquaria.cloud.moh.iais.helper.QueryHelp;
import com.ecquaria.cloud.moh.iais.helper.WebValidationHelper;
import com.ecquaria.cloud.moh.iais.service.OrgUserAccountService;
import com.ecquaria.cloud.moh.iais.service.impl.OrgUserAccountServiceImpl;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Spy;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.powermock.reflect.Whitebox;
import org.springframework.mock.web.MockHttpServletRequest;
import sop.webflow.rt.api.BaseProcessClass;

import static org.powermock.api.mockito.PowerMockito.when;

/**
 * OrgUserAccountDelegatorTest
 *
 * @author suocheng
 * @date 7/31/2019
 */
@RunWith(PowerMockRunner.class)
@PrepareForTest({OrgUserAccountDelegator.class,CrudHelper.class,WebValidationHelper.class,
         MiscUtil.class,ParamUtil.class,RestApiUtil.class,
        QueryHelp.class})
public class OrgUserAccountDelegatorTest {
    @InjectMocks
    private OrgUserAccountDelegator orgUserAccountDelegator;
    @Spy
    private OrgUserAccountService orgUserAccountService = new OrgUserAccountServiceImpl();
    @Mock
    private BaseProcessClass bpc;
    @Mock
    private ValidationResult validationResult;

    private MockHttpServletRequest request = new MockHttpServletRequest();
    private SearchResult searchResult = new SearchResult();
    private OrgUserAccountDto orgUserAccountDto = new OrgUserAccountDto();
    @Before
    public void setup(){
        bpc.request=request;
        PowerMockito.mockStatic(RestApiUtil.class);
        when(RestApiUtil.query(Mockito.anyString(),Mockito.anyObject())).thenReturn(searchResult);
        when(RestApiUtil.getByReqParam(Mockito.anyString(),Mockito.anyObject(),Mockito.anyObject())).thenReturn(orgUserAccountDto);
        PowerMockito.mockStatic(QueryHelp.class);
        PowerMockito.mockStatic(CrudHelper.class);
        PowerMockito.mockStatic(WebValidationHelper.class);
        when(WebValidationHelper.validateProperty(Mockito.anyObject(),Mockito.anyString())).thenReturn(validationResult);
        Whitebox.setInternalState(orgUserAccountDelegator,"orgUserAccountService",orgUserAccountService);

        PowerMockito.mockStatic(MiscUtil.class);
        when(MiscUtil.getCurrentRequest()).thenReturn(request);
    }

    @Test
    public void testdoStart(){
        orgUserAccountDelegator.doStart(bpc);
        Assert.assertTrue(true);
    }

    @Test
    public void testprepareDatat(){
        orgUserAccountDelegator.prepareData(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testprepareSwitch(){
        orgUserAccountDelegator.prepareSwitch(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoSearch(){
        request.addParameter("nric_no","nric_no");
        request.addParameter("uen_no","uen_no");
        request.addParameter("status","pending");
        orgUserAccountDelegator.doSearch(bpc);
        Assert.assertTrue(true);
    }

    @Test
    public void testdoSorting(){
        orgUserAccountDelegator.doSorting(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoPaging(){
        orgUserAccountDelegator.doPaging(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoDelete(){
        request.addParameter("crud_action_value","0");
        orgUserAccountDelegator.doDelete(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testprepareCreateData(){
        orgUserAccountDelegator.prepareCreateData(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoCreateValidateHasError(){
        request.addParameter("crud_action_type","save");
        when(validationResult.isHasErrors()).thenReturn(true);
        orgUserAccountDelegator.doCreate(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoCreate(){
        request.addParameter("crud_action_type","save");
        orgUserAccountDelegator.doCreate(bpc);
        Assert.assertTrue(true);
    }

    @Test
    public void testprepareEdit(){
        PowerMockito.mockStatic(ParamUtil.class);
        PowerMockito.when(ParamUtil.getString(Mockito.anyObject(),Mockito.anyObject())).thenReturn("rowguid");
        PowerMockito.when(MiscUtil.transferEntityDto(Mockito.anyObject(),Mockito.anyObject())).thenReturn(orgUserAccountDto);
        orgUserAccountDelegator.prepareEdit(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoEditValidateHasError(){
        request.addParameter("crud_action_type","edit");
        request.getSession().setAttribute(OrgUserAccountDelegator.ORG_USER_DTO_ATTR, orgUserAccountDto);
        when(validationResult.isHasErrors()).thenReturn(true);
        orgUserAccountDelegator.doEdit(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoEdit(){
        request.addParameter("crud_action_type","edit");
        orgUserAccountDto.setOldNricNo("test0");
        request.getSession().setAttribute(OrgUserAccountDelegator.ORG_USER_DTO_ATTR, orgUserAccountDto);
        request.addParameter("nircNo","test0");
        orgUserAccountDelegator.doEdit(bpc);
        Assert.assertTrue(true);
    }

}
