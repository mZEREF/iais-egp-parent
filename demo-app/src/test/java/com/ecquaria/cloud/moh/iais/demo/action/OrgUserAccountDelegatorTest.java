/*
 *   This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.demo.action;

import com.ecquaria.cloud.helper.SpringContextHelper;
import com.ecquaria.cloud.moh.iais.demo.dto.DemoQueryDto;
import com.ecquaria.cloud.moh.iais.demo.dto.OrgUserAccountDto;
import com.ecquaria.cloud.moh.iais.demo.service.OrgUserAccountService;
import com.ecquaria.cloud.moh.iais.demo.service.impl.OrgUserAccountServiceImpl;
import com.ecquaria.cloud.moh.iais.helper.CrudHelper;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Spy;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.powermock.reflect.Whitebox;
import org.springframework.context.ApplicationContext;
import org.springframework.mock.web.MockHttpServletRequest;
import sg.gov.moh.iais.common.dto.SearchResult;
import sg.gov.moh.iais.common.querydao.QueryDao;
import sg.gov.moh.iais.common.utils.MiscUtil;
import sg.gov.moh.iais.common.utils.ParamUtil;
import sg.gov.moh.iais.web.logging.dto.AuditTrailDto;
import sop.webflow.rt.api.BaseProcessClass;

import static org.powermock.api.mockito.PowerMockito.when;

/**
 * OrgUserAccountDelegatorTest
 *
 * @author suocheng
 * @date 7/31/2019
 */
@RunWith(PowerMockRunner.class)
@PrepareForTest({OrgUserAccountDelegator.class,CrudHelper.class,OrgUserAccountServiceImpl.class,
        SpringContextHelper.class, MiscUtil.class,AuditTrailDto.class,ParamUtil.class})
public class OrgUserAccountDelegatorTest {
    @InjectMocks
    private OrgUserAccountDelegator orgUserAccountDelegator;
    @Spy
    private OrgUserAccountService orgUserAccountService = new OrgUserAccountServiceImpl();
    @Mock
    private BaseProcessClass bpc;

    private MockHttpServletRequest request = new MockHttpServletRequest();

    @Mock
    private QueryDao<DemoQueryDto> demoQueryDao;
//    @Mock
//    private OrgUserAccountDao orgUserAccountDao;

   // private OrgUserAccount orgUserAccount = new OrgUserAccount() ;

    @Before
    public void setup(){
        bpc.request=request;
        PowerMockito.mockStatic(CrudHelper.class);
       // PowerMockito.doNothing().when(orgUserAccountDao).delete(Mockito.anyInt());
        //when(orgUserAccountDao.findOne((Example)Mockito.anyObject())).thenReturn(orgUserAccount);
        Whitebox.setInternalState(orgUserAccountDelegator,"orgUserAccountService",orgUserAccountService);
       // Whitebox.setInternalState(orgUserAccountService,"demoQueryDao",demoQueryDao);
       // Whitebox.setInternalState(orgUserAccountService,"orgUserAccountDao",orgUserAccountDao);
        PowerMockito.mockStatic(SpringContextHelper.class);
        ApplicationContext context = PowerMockito.mock(ApplicationContext.class);
        when(SpringContextHelper.getContext()).thenReturn(context);
        //doReturn(orgUserAccountDao).when(context).getBean(OrgUserAccountDao.class);
        PowerMockito.mockStatic(MiscUtil.class);
        when(MiscUtil.getCurrentRequest()).thenReturn(request);
        PowerMockito.mockStatic(AuditTrailDto.class);
        AuditTrailDto dto = new AuditTrailDto();
        PowerMockito.when(AuditTrailDto.getThreadDto()).thenReturn(dto);
    }

    @Test
    public void testdoStart(){
        orgUserAccountDelegator.doStart(bpc);
        Assert.assertTrue(true);
    }

    @Test
    public void testprepareDatat(){
        SearchResult searchResult = new SearchResult();
       // when(demoQueryDao.doQuery(Mockito.anyObject())).thenReturn(searchResult);
        //orgUserAccountDelegator.prepareData(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testprepareSwitch(){
        orgUserAccountDelegator.prepareSwitch(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoSearch(){
        request.addParameter("nric_no","nric_no");
        request.addParameter("uen_no","uen_no");
        request.addParameter("status","pending");
        orgUserAccountDelegator.doSearch(bpc);
        Assert.assertTrue(true);
    }

    @Test
    public void testdoSorting(){
        orgUserAccountDelegator.doSorting(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoPaging(){
        orgUserAccountDelegator.doPaging(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoDelete(){
        request.addParameter("crud_action_value","0");
       // PowerMockito.doNothing().when(orgUserAccountDao).delete(Mockito.anyInt());
        orgUserAccountDelegator.doDelete(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testprepareCreateData(){
        orgUserAccountDelegator.prepareCreateData(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoCreateValidateHasError(){
        request.addParameter("crud_action_type","save");
        orgUserAccountDelegator.doCreate(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoCreate(){
        request.addParameter("crud_action_type","save");
        request.addParameter("nircNo","test0");
        orgUserAccountDelegator.doCreate(bpc);
        Assert.assertTrue(true);
    }

    @Test
    public void testprepareEdit(){
        PowerMockito.mockStatic(ParamUtil.class);
        PowerMockito.when(ParamUtil.getString(Mockito.anyObject(),Mockito.anyObject())).thenReturn("rowguid");
        PowerMockito.when(MiscUtil.transferEntityDto(Mockito.anyObject(),Mockito.anyObject())).thenReturn(new OrgUserAccountDto());
        orgUserAccountDelegator.prepareEdit(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoEditValidateHasError(){
        request.addParameter("crud_action_type","edit");
        request.getSession().setAttribute(OrgUserAccountDelegator.ORG_USER_DTO_ATTR, new OrgUserAccountDto());
        orgUserAccountDelegator.doEdit(bpc);
        Assert.assertTrue(true);
    }
    @Test
    public void testdoEdit(){
        request.addParameter("crud_action_type","edit");
        OrgUserAccountDto dto = new OrgUserAccountDto();
        dto.setOldNricNo("test0");
        request.getSession().setAttribute(OrgUserAccountDelegator.ORG_USER_DTO_ATTR, dto);
        request.addParameter("nircNo","test0");
        orgUserAccountDelegator.doEdit(bpc);
        Assert.assertTrue(true);
    }

}
