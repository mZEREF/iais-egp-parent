/*
 *   This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.common.helper;

import com.ecquaria.cloud.moh.iais.common.util.StringUtil;
import sg.gov.moh.iais.common.validation.dto.ValidationResult;
import sg.gov.moh.iais.common.validation.ValidationUtils;
import sop.webflow.rt.api.BaseProcessClass;

import java.lang.reflect.Field;
import java.util.Iterator;
import java.util.Map;

/**
 * Form Validator Helper
 *
 * @author suocheng
 * @date 7/5/2019
 */
public class IFormValidatorHelper {

    /**
     * @description: do the validate for the form
     *
     * @author: suocheng on 7/5/2019 3:54 PM
     * @param: [bpc, formName, formDto]
     * @return: sg.gov.moh.iais.common.validation.ValidationResult
     */
    public static ValidationResult validateForm(BaseProcessClass bpc,String formName,Class formDto) throws Exception {
     return validateForm(bpc,formName,formDto,true);
    }
    /**
     * @description: do the validate for the form
     *
     * @author: suocheng on 7/5/2019 3:55 PM
     * @param: [bpc, formName, formDto, isAddToForm]
     * @return: sg.gov.moh.iais.common.validation.ValidationResult
     */
    public static ValidationResult validateForm(BaseProcessClass bpc,String formName,Class formDto,boolean isAddToForm) throws Exception {
      Field[] fields =formDto.getDeclaredFields();
      Object obj = formDto.newInstance();
      if(fields!=null && fields.length>0){
          for(Field field:fields){
              String name = field.getName();
              String value = IaisFormHelper.getFormFieldData(bpc,formName,name);
              if(!StringUtil.isEmpty(value)){
                  field.setAccessible(true);
                  field.set(obj,value);
              }
          }
      }
      ValidationResult result = ValidationUtils.validateEntity(obj);
      if(isAddToForm){
          addErrorToForm(bpc,result);
      }
      return result;
    }

    private static void addErrorToForm(BaseProcessClass bpc,ValidationResult result){
        if(result.isHasErrors()){
            Map<String, String> errors = result.retrieveAll();
            Iterator<String> i = errors.keySet().iterator();
            while (i.hasNext()){
                String key = i.next();
                String value = errors.get(key);
                IaisFormHelper.addFieldErrorMessage(bpc.request,key,value);
            }
        }
    }
}
