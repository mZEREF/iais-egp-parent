/*
 *   This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.test.action;

import com.ecquaria.cloud.annotation.Delegator;
import com.ecquaria.cloud.moh.iais.dto.SearchParam;
import com.ecquaria.cloud.moh.iais.dto.SearchResult;
import com.ecquaria.cloud.moh.iais.querydao.QueryDao;
import com.ecquaria.cloud.moh.iais.test.dto.OrgUserAccountDto;
import com.ecquaria.cloud.moh.iais.test.entity.DemoQuery;
import com.ecquaria.cloud.moh.iais.test.entity.OrgUserAccount;
import com.ecquaria.cloud.moh.iais.test.service.OrgUserAccountService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import sg.gov.moh.iais.common.utils.MiscUtil;
import sg.gov.moh.iais.common.utils.StringUtil;
import sg.gov.moh.iais.common.validation.ValidationUtils;
import sg.gov.moh.iais.common.validation.dto.ValidationResult;
import sop.webflow.rt.api.BaseProcessClass;

import java.util.Map;

/**
 * OrgUserAccountController
 *
 * @author suocheng
 * @date 7/12/2019
 */
@Delegator
@Slf4j
public class OrgUserAccountDelegator {

    private static final String SEARCHPARAM = "searchParam";
    private static final String SEARCHRESULT = "searchResult";
    @Autowired
    private OrgUserAccountService orgUserAccountService;

    @Autowired
    private QueryDao<DemoQuery> demoQueryDao;

    public void doStart(BaseProcessClass bpc){
        log.info("The doStart start ...");
        bpc.request.getSession().setAttribute(SEARCHPARAM,null);
        bpc.request.getSession().setAttribute(SEARCHRESULT,null);
        log.info("The doStart end ...");
    }
    public  void prepareData(BaseProcessClass bpc){
        log.info("The prepareData start ...");
        SearchParam param = getSearchParam(bpc);
        param.addFilter("ORGANIZATION_ID","0",true);
        bpc.request.setAttribute("ORGANIZATION_ID",0);
        SearchResult searchResult = demoQueryDao.doQuery(param, "demo", "searchDemo");
        bpc.request.setAttribute(SEARCHPARAM,param);
        bpc.request.setAttribute(SEARCHRESULT,searchResult);
        log.info("The prepareData end ...");
    }
    private SearchParam getSearchParam(BaseProcessClass bpc){
        SearchParam param = (SearchParam)bpc.request.getSession().getAttribute(SEARCHPARAM);
        if(param == null){
            param = new SearchParam(DemoQuery.class);
            param.setPageSize(10);
            param.setPageNo(1);
            param.setSort("user_id", SearchParam.ASCENDING);
            bpc.request.getSession().setAttribute(SEARCHPARAM,param);
        }
        return param;
    }
    public  void prepareSwitch(BaseProcessClass bpc){
        log.info("The prepareSwitch start ...");
          String  action = bpc.request.getParameter("crud_action_type");
        log.info("*******************action-->:"+action);
        log.info("The prepareSwitch end ...");
    }
    public  void doSearch(BaseProcessClass bpc){
        log.info("The prepareSwitch start ...");
        SearchParam param = getSearchParam(bpc);
        String nric_no = bpc.request.getParameter("nric_no");
        String uen_no = bpc.request.getParameter("uen_no");
        if(!StringUtil.isEmpty(nric_no)){
            param.addFilter("nric_no",nric_no,true);
        }else{
            param.removeParam("nric_no");
            param.removeFilter("nric_no");
        }
        if(!StringUtil.isEmpty(uen_no)){
            param.addFilter("uen_no",uen_no,true);
        }else{
            param.removeParam("uen_no");
            param.removeFilter("uen_no");
        }

        log.info("The prepareSwitch end ...");
    }
    public  void doSorting(BaseProcessClass bpc){
        log.info("The doSorting start ...");
        String sortFieldName = bpc.request.getParameter("crud_action_value");
        String sortType = bpc.request.getParameter("crud_action_additional");
        SearchParam param = getSearchParam(bpc);
        param.setSort(sortFieldName,sortType);
        log.info("The doSorting end ...");
    }
    public  void doPaging(BaseProcessClass bpc){
        log.info("The prepareSwitch start ...");
          String  pageNo = bpc.request.getParameter("pageJumpNoTextchangePage");
        SearchParam param = getSearchParam(bpc);
          if(!StringUtil.isEmpty(pageNo)){
              param.setPageNo(Integer.parseInt(pageNo));
          }
        log.info("The prepareSwitch end ...");
    }
    public  void doDelete(BaseProcessClass bpc){
        log.info("The prepareSwitch start ...");
        String id = bpc.request.getParameter("crud_action_value");
        if(!StringUtil.isEmpty(id)){
            orgUserAccountService.deleteOrgUserAccountsById(id);
        }
        log.info("The prepareSwitch end ...");
    }

    public void doCreateStart(BaseProcessClass bpc){
        log.info("The doCreateStart start ...");

        log.info("The doCreateStart end ...");
    }
    public void prepareCreateData(BaseProcessClass bpc){
        log.info("The doCreateStart start ...");
        String orgId = bpc.request.getParameter("crud_action_value");
        bpc.request.setAttribute("orgId",orgId);
        log.info("******************-->:"+orgId);
        log.info("The doCreateStart end ...");
    }
    public void doCreate(BaseProcessClass bpc){
        log.info("The doCreateStart start ...");
        String type = bpc.request.getParameter("crud_action_type");
        if("save".equals(type)){
            String orgId = bpc.request.getParameter("crud_action_value");
            String name = bpc.request.getParameter("name");
            String nircNo = bpc.request.getParameter("nircNo");
            String corpPassId = bpc.request.getParameter("corpPassId");
            OrgUserAccountDto accountDto = new OrgUserAccountDto();
            accountDto.setOrgId(orgId);
            accountDto.setCorpPassId(corpPassId);
            accountDto.setName(name);
            accountDto.setNircNo(nircNo);
            ValidationResult validationResult =ValidationUtils.validateEntity(accountDto);
            if (validationResult.isHasErrors()){
                log.error("****************Error");
                Map<String,String> errorMap = validationResult.retrieveAll();
                bpc.request.setAttribute("errorMap",errorMap);
                bpc.request.setAttribute("isValid","N");
            }else{
                OrgUserAccount orgUserAccount = MiscUtil.transferEntityDto(accountDto,OrgUserAccount.class);
                orgUserAccountService.saveOrgUserAccounts(orgUserAccount);
                bpc.request.setAttribute("isValid","Y");
            }
        }else{
            bpc.request.setAttribute("isValid","Y");
        }

        log.info("The doCreateStart end ...");
    }
}
