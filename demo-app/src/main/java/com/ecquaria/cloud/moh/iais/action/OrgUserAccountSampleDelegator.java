/*
 *   This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.action;

import com.ecquaria.cloud.annotation.Delegator;
import com.ecquaria.cloud.moh.iais.common.constant.sample.DemoConstants;
import com.ecquaria.cloud.moh.iais.common.dto.SearchParam;
import com.ecquaria.cloud.moh.iais.common.dto.SearchResult;
import com.ecquaria.cloud.moh.iais.common.dto.SelectOption;
import com.ecquaria.cloud.moh.iais.common.dto.sample.DemoQueryDto;
import com.ecquaria.cloud.moh.iais.common.dto.sample.OrgUserAccountSampleDto;
import com.ecquaria.cloud.moh.iais.common.utils.IaisCommonUtils;
import com.ecquaria.cloud.moh.iais.common.utils.ParamUtil;
import com.ecquaria.cloud.moh.iais.common.utils.StringUtil;
import com.ecquaria.cloud.moh.iais.common.validation.dto.ValidationResult;
import com.ecquaria.cloud.moh.iais.helper.AuditTrailHelper;
import com.ecquaria.cloud.moh.iais.helper.CrudHelper;
import com.ecquaria.cloud.moh.iais.helper.QueryHelp;
import com.ecquaria.cloud.moh.iais.helper.SqlHelper;
import com.ecquaria.cloud.moh.iais.helper.SysParamUtil;
import com.ecquaria.cloud.moh.iais.helper.WebValidationHelper;
import com.ecquaria.cloud.moh.iais.service.OrgUserAccountSampleService;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections.MapUtils;
import org.springframework.beans.factory.annotation.Autowired;
import sop.webflow.rt.api.BaseProcessClass;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Process: OrgUserAccount
 *
 * @author suocheng
 * @date 7/12/2019
 */
@Delegator("orgUserAccountDelegator")
@Slf4j
public class OrgUserAccountSampleDelegator {


    @Autowired
    private OrgUserAccountSampleService orgUserAccountService;

    /**
     * StartStep: Start
     *
     * @param bpc
     * @throws
     */
    public void doStart(BaseProcessClass bpc){
        log.debug(StringUtil.changeForLog("The doStart start ..."));
        AuditTrailHelper.auditFunction("iais-demo", "org user management");
        HttpServletRequest request = bpc.request;
        ParamUtil.setSessionAttr(request, DemoConstants.SEARCH_PARAM, null);
        ParamUtil.setSessionAttr(request, DemoConstants.SEARCH_RESULT, null);
        ParamUtil.setSessionAttr(request, DemoConstants.ORG_USER_DTO_ATTR, null);
        log.debug(StringUtil.changeForLog("The doStart end ..."));
    }
    /**
     * AutoStep: PrepareData
     *
     * @param bpc
     * @throws
     */
    public  void prepareData(BaseProcessClass bpc){
        log.debug(StringUtil.changeForLog("The prepareData start ..."));
        HttpServletRequest request = bpc.request;
        SearchParam param = getSearchParam(bpc);
        param.addFilter("ORGANIZATION_ID","1",true);
        ParamUtil.setRequestAttr(request,"ORGANIZATION_ID", 1);
        QueryHelp.setMainSql("demo", "searchDemo",param);
        SearchResult searchResult = orgUserAccountService.doQuery(param);
        ParamUtil.setSessionAttr(request, DemoConstants.SEARCH_PARAM, param);
        ParamUtil.setRequestAttr(request, DemoConstants.SEARCH_RESULT, searchResult);
        log.debug(StringUtil.changeForLog("The prepareData end ..."));
    }

    /**
     * AutoStep: PrepareSwitch
     *
     * @param bpc
     * @throws
     */
    public  void prepareSwitch(BaseProcessClass bpc){
        log.debug(StringUtil.changeForLog("The prepareSwitch start ..."));
        String  action = ParamUtil.getString(bpc.request,DemoConstants.CRUD_ACTION_TYPE);
        log.debug(StringUtil.changeForLog("*******************action-->:"+action));
        log.debug(StringUtil.changeForLog("The prepareSwitch end ..."));
    }
    /**
     * AutoStep: doSearch
     *
     * @param bpc
     * @throws
     */
    public void doSearch(BaseProcessClass bpc){
        log.debug(StringUtil.changeForLog("The doSearch start ..."));
        HttpServletRequest request = bpc.request;
        SearchParam param = getSearchParam(bpc,true);
        String nricNo = ParamUtil.getString(request, "nric_no");
        String uenNo = ParamUtil.getString(request,"uen_no");
        String[] status = ParamUtil.getStrings(request,DemoConstants.STATUS);
        if(!StringUtil.isEmpty(nricNo)){
            param.addFilter("nric_no",nricNo,true);
        }
        if(!StringUtil.isEmpty(uenNo)){
            param.addFilter("uen_no",uenNo,true);
        }
        if(status != null && status.length>0){
            String statusStr = SqlHelper.constructInCondition("account.STATUS",status.length);
            param.addParam(DemoConstants.STATUS,statusStr);
            for (int i = 0 ; i<status.length; i++ ) {
                param.addFilter("account.STATUS"+i,status[i]);
            }
        }
        log.debug(StringUtil.changeForLog("The doSearch end ..."));
    }
    /**
     * AutoStep: doSorting
     *
     * @param bpc
     * @throws
     */
    public void doSorting(BaseProcessClass bpc){
        log.debug(StringUtil.changeForLog("The doSorting start ..."));
        SearchParam searchParam = getSearchParam(bpc);
        CrudHelper.doSorting(searchParam,  bpc.request);
        log.debug(StringUtil.changeForLog("The doSorting end ..."));
    }
    /**
     * AutoStep: doPaging
     *
     * @param bpc
     * @throws
     */
    public void doPaging(BaseProcessClass bpc){
        log.debug(StringUtil.changeForLog("The doPaging start ..."));
        SearchParam searchParam = getSearchParam(bpc);
        CrudHelper.doPaging(searchParam,bpc.request);
        log.debug(StringUtil.changeForLog("The doPaging end ..."));
    }
    /**
     * AutoStep: doDelete
     *
     * @param bpc
     * @throws
     */
    public void doDelete(BaseProcessClass bpc){
        log.debug(StringUtil.changeForLog("The doDelete start ..."));
        String id = ParamUtil.getString(bpc.request,DemoConstants.CRUD_ACTION_VALUE);
        if(!StringUtil.isEmpty(id)){
            orgUserAccountService.deleteOrgUserAccountsById(id);
        }
        log.debug(StringUtil.changeForLog("The doDelete end ..."));
    }
    /**
     * AutoStep: PrepareCreate
     *
     * @param bpc
     * @throws
     */
    public void prepareCreateData(BaseProcessClass bpc){
        log.debug(StringUtil.changeForLog("The prepareCreateData start ..."));
        HttpServletRequest request = bpc.request;
        String orgId = ParamUtil.getString(request,DemoConstants.CRUD_ACTION_VALUE);
        ParamUtil.setRequestAttr(request, "orgId", orgId);
        List statusSelect = new ArrayList<SelectOption>();
        SelectOption sp1 = new SelectOption("pending","Pending");
        statusSelect.add(sp1);
        SelectOption sp2 = new SelectOption("procing","Procing");
        statusSelect.add(sp2);
        ParamUtil.setRequestAttr(request,"statusSelect",statusSelect);
        ParamUtil.setRequestAttr(request, DemoConstants.ORG_USER_ACCOUNT_TILE,"Org Account Create");
        Map<String,String> errorMap = (Map<String, String>) ParamUtil.getRequestAttr(request,DemoConstants.ERRORMAP);
        if(MapUtils.isEmpty(errorMap)){
            ParamUtil.setSessionAttr(request, DemoConstants.ORG_USER_DTO_ATTR, null);
        }
        log.debug(StringUtil.changeForLog("******************-->:"+orgId));
        log.debug(StringUtil.changeForLog("The prepareCreateData end ..."));
    }
    /**
     * AutoStep: doCreate
     *
     * @param bpc
     * @throws
     */
    public void doCreate(BaseProcessClass bpc){
        log.debug(StringUtil.changeForLog("The doCreate start ..."));
        HttpServletRequest request = bpc.request;
        String type = ParamUtil.getString(request, DemoConstants.CRUD_ACTION_TYPE);
        if("save".equals(type)){
            String orgId = ParamUtil.getString(request,DemoConstants.CRUD_ACTION_VALUE);
            OrgUserAccountSampleDto accountDto = new OrgUserAccountSampleDto();
            getValueFromPage(accountDto, request);
            accountDto.setOrgId(orgId);
            ParamUtil.setSessionAttr(request, DemoConstants.ORG_USER_DTO_ATTR, accountDto);
            ValidationResult validationResult =WebValidationHelper.validateProperty(accountDto,"create");
            if (validationResult.isHasErrors()){
                Map<String,String> errorMap = validationResult.retrieveAll();
                ParamUtil.setRequestAttr(request,DemoConstants.ERRORMAP,errorMap);
                ParamUtil.setRequestAttr(request,DemoConstants.ISVALID,"N");
            }else{
                orgUserAccountService.saveOrgUserAccounts(accountDto);
                ParamUtil.setRequestAttr(request,DemoConstants.ISVALID,"Y");
            }
        }else{
            ParamUtil.setRequestAttr(request,DemoConstants.ISVALID,"Y");
        }

        log.debug(StringUtil.changeForLog("The doCreate end ..."));
    }
    /**
     * AutoStep: PrepareEdit
     *
     * @param bpc
     * @throws
     */
    public void prepareEdit(BaseProcessClass bpc){
        log.debug(StringUtil.changeForLog("The prepareEdit start ..."));
        HttpServletRequest request = bpc.request;
        String rowguid = ParamUtil.getMaskedString(request,DemoConstants.CRUD_ACTION_VALUE);
        OrgUserAccountSampleDto dto;
        if(StringUtil.isEmpty(rowguid)){
            dto = (OrgUserAccountSampleDto)ParamUtil.getSessionAttr(request,DemoConstants.ORG_USER_DTO_ATTR);
        }else{
            dto = orgUserAccountService.getOrgUserAccountByRowguId(rowguid);
            dto.setEditFlag(true);
            dto.setOldNricNo(dto.getNircNo());
        }
        ParamUtil.setSessionAttr(request, DemoConstants.ORG_USER_DTO_ATTR, dto);
        ParamUtil.setRequestAttr(request, DemoConstants.ORG_USER_ACCOUNT_TILE,"Org Account Edit");
        List statusSelect = new ArrayList<SelectOption>();
        SelectOption sp1 = new SelectOption("pending","Pending");
        statusSelect.add(sp1);
        SelectOption sp2 = new SelectOption("procing","Procing");
        statusSelect.add(sp2);
        ParamUtil.setRequestAttr(request, "statusSelect",statusSelect);
        log.debug(StringUtil.changeForLog("The prepareEdit end ..."));
    }
    /**
     * AutoStep: doEdit
     *
     * @param bpc
     * @throws
     */
    public void doEdit(BaseProcessClass bpc){
        log.debug(StringUtil.changeForLog("The doEdit start ..."));
        HttpServletRequest request = bpc.request;
        String type = ParamUtil.getString(request,DemoConstants.CRUD_ACTION_TYPE);
        if("edit".equals(type)){
            OrgUserAccountSampleDto accountDto =
                    (OrgUserAccountSampleDto) ParamUtil.getSessionAttr(request, DemoConstants.ORG_USER_DTO_ATTR);
            getValueFromPage(accountDto, request);
            ValidationResult validationResult =WebValidationHelper.validateProperty(accountDto, "edit");
            if (validationResult.isHasErrors()){
                log.error("****************Error");
                Map<String,String> errorMap = validationResult.retrieveAll();
                ParamUtil.setRequestAttr(request,DemoConstants.ERRORMAP,errorMap);
                ParamUtil.setRequestAttr(request,DemoConstants.ISVALID,"N");
            }else{
                Map<String,String> successMap = IaisCommonUtils.genNewHashMap();
                successMap.put("test","suceess");
                orgUserAccountService.saveOrgUserAccounts(accountDto);
                ParamUtil.setRequestAttr(request,DemoConstants.ISVALID,"Y");
                ParamUtil.setRequestAttr(request,"successMap",successMap);
            }
        }else{
            ParamUtil.setRequestAttr(request,DemoConstants.ISVALID,"Y");
        }
        log.debug(StringUtil.changeForLog("The doEdit end ..."));
    }

    /******************************************************************************************************************
     Private methods
     ******************************************************************************************************************/
    private SearchParam getSearchParam(BaseProcessClass bpc){
        return getSearchParam(bpc, false);
    }

    private SearchParam getSearchParam(BaseProcessClass bpc,boolean isNew){
        HttpServletRequest request = bpc.request;
        SearchParam param = (SearchParam) ParamUtil.getSessionAttr(request, DemoConstants.SEARCH_PARAM);
        if(param == null || isNew){
            param = new SearchParam(DemoQueryDto.class.getName());
            param.setPageSize(SysParamUtil.getDefaultPageSize());
            param.setPageNo(1);
            param.setSort("user_id", SearchParam.ASCENDING);
            ParamUtil.setSessionAttr(request, DemoConstants.SEARCH_PARAM, param);
        }
        return param;
    }

    private void getValueFromPage(OrgUserAccountSampleDto accountDto, HttpServletRequest request) {
        String name = ParamUtil.getString(request,"name");
        String nircNo = ParamUtil.getString(request,"nircNo");
        String corpPassId = ParamUtil.getString(request,"corpPassId");
        String status = ParamUtil.getString(request,DemoConstants.STATUS);
        accountDto.setName(name);
        accountDto.setNircNo(nircNo);
        accountDto.setCorpPassId(corpPassId);
        accountDto.setStatus(status);
    }
}
