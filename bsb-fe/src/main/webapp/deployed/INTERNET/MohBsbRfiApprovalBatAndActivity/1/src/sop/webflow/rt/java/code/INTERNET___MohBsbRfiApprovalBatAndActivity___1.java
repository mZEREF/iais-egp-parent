/**
 * Generated by SIT
 *
 * Feel free to add  methods  or comments. The content of this 
 * file will be kept as-is when committed.
 *
 * Extending this  class is not recommended , since the class-
 * name will change together with the version. Calling methods
 * from external code is not recommended as well , for similar
 * reasons.
 */
package sop.webflow.rt.java.code;
import sop.webflow.rt.api.BaseProcessClass;
import com.ecquaria.cloud.helper.EngineHelper;

public class INTERNET___MohBsbRfiApprovalBatAndActivity___1 extends BaseProcessClass {
	private static final String DELEGATOR = "bsbRfiApprovalBatAndActivityDelegator";
	
	public void start_OnStepProcess_0() throws Exception {
	// 		Start->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "start", this);
	}

	public void init_OnStepProcess_0() throws Exception {
	// 		Init->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "init", this);
	}

	public void preApprovalSelection_OnStepProcess_0() throws Exception {
	// 		PreApprovalSelection->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preApprovalSelection", this);
	}

	public void handleApprovalSelection_OnStepProcess_0() throws Exception {
	// 		HandleApprovalSelection->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleApprovalSelection", this);
	}

	public void preCompanyInfo_OnStepProcess_0() throws Exception {
	// 		PreCompanyInfo->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preCompanyInfo", this);
	}

	public void handleCompanyInfo_OnStepProcess_0() throws Exception {
	// 		HandleCompanyInfo->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleCompanyInfo", this);
	}

	public void preFacProfile_OnStepProcess_0() throws Exception {
	// 		PreFacProfile->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preFacProfile", this);
	}

	public void handleFacProfile_OnStepProcess_0() throws Exception {
	// 		HandleFacProfile->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleFacProfile", this);
	}

	public void prePossessBatDetails_OnStepProcess_0() throws Exception {
	// 		PrePossessBatDetails->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "prePossessBatDetails", this);
	}

	public void handlePossessBatDetails_OnStepProcess_0() throws Exception {
	// 		HandlePossessBatDetails->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handlePossessBatDetails", this);
	}

	public void preLargeBatDetails_OnStepProcess_0() throws Exception {
	// 		PreLargeBatDetails->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preLargeBatDetails", this);
	}

	public void handleLargeBatDetails_OnStepProcess_0() throws Exception {
	// 		HandleLargeBatDetails->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleLargeBatDetails", this);
	}

	public void preSpecialBatDetails_OnStepProcess_0() throws Exception {
	// 		PreSpecialBatDetails->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preSpecialBatDetails", this);
	}

	public void handleSpecialBatDetails_OnStepProcess_0() throws Exception {
	// 		HandleSpecialBatDetails->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleSpecialBatDetails", this);
	}

	public void preFacAuthorised_OnStepProcess_0() throws Exception {
	// 		PreFacAuthorised->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preFacAuthorised", this);
	}

	public void handleFacAuthorised_OnStepProcess_0() throws Exception {
	// 		HandleFacAuthorised->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleFacAuthorised", this);
	}

	public void preActivityDetails_OnStepProcess_0() throws Exception {
	// 		PreActivityDetails->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preActivityDetails", this);
	}

	public void handleActivityDetails_OnStepProcess_0() throws Exception {
	// 		HandleActivityDetails->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleActivityDetails", this);
	}

	public void prePrimaryDoc_OnStepProcess_0() throws Exception {
	// 		PrePrimaryDoc->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "prePrimaryDoc", this);
	}

	public void handlePrimaryDoc_OnStepProcess_0() throws Exception {
	// 		HandlePrimaryDoc->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handlePrimaryDoc", this);
	}

	public void prePreview_OnStepProcess_0() throws Exception {
	// 		PrePreview->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "prePreview", this);
	}

	public void handlePreview_OnStepProcess_0() throws Exception {
	// 		HandlePreview->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handlePreview", this);
	}

	public void actionFilter_OnStepProcess_0() throws Exception {
	// 		ActionFilter->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "actionFilter", this);
	}

	public void jumpFilter_OnStepProcess_0() throws Exception {
	// 		JumpFilter->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "jumpFilter", this);
	}

	public void preAcknowledge_OnStepProcess_0() throws Exception {
	// 		PreAcknowledge->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preAcknowledge", this);
	}

	public void print_OnStepProcess_0() throws Exception {
	// 		Print->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "print", this);
	}

}
