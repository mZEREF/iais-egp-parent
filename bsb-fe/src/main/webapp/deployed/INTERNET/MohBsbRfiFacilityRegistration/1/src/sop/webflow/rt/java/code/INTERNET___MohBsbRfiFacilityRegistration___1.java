/**
 * Generated by SIT
 *
 * Feel free to add  methods  or comments. The content of this 
 * file will be kept as-is when committed.
 *
 * Extending this  class is not recommended , since the class-
 * name will change together with the version. Calling methods
 * from external code is not recommended as well , for similar
 * reasons.
 */
package sop.webflow.rt.java.code;
import com.ecquaria.cloud.helper.EngineHelper;

import sop.webflow.rt.api.BaseProcessClass;

public class INTERNET___MohBsbRfiFacilityRegistration___1 extends BaseProcessClass {
	private static final String DELEGATOR ="bsbRfiFacilityRegisterDelegator";

	public void start_OnStepProcess_0() throws Exception {
	// 		Start->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "start", this);
	}

	public void init_OnStepProcess_0() throws Exception {
	// 		Init->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "init", this);
	}

	public void preCompInfo_OnStepProcess_0() throws Exception {
	// 		PreCompInfo->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preCompInfo", this);
	}

	public void handleCompInfo_OnStepProcess_0() throws Exception {
	// 		HandleCompInfo->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleCompInfo", this);
	}

	public void preFacProfile_OnStepProcess_0() throws Exception {
	// 		PreFacProfile->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preFacProfile", this);
	}

	public void handleFacProfile_OnStepProcess_0() throws Exception {
	// 		HandleFacProfile->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleFacProfile", this);
	}

	public void preFacOperator_OnStepProcess_0() throws Exception {
	// 		PreFacOperator->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preFacOperator", this);
	}

	public void handleFacOperator_OnStepProcess_0() throws Exception {
	// 		HandleFacOperator->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleFacOperator", this);
	}

	public void preFacAdminOfficer_OnStepProcess_0() throws Exception {
	// 		PreFacAdminOfficer->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preFacAdminOfficer", this);
	}

	public void handleFacAdminOfficer_OnStepProcess_0() throws Exception {
	// 		HandleFacAdminOfficer->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleFacAdminOfficer", this);
	}

	public void preFacCommitteePreview_OnStepProcess_0() throws Exception {
	// 		PreFacCommitteePreview->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preFacInfoCommittee", this);
	}

	public void handleFacCommitteePreview_OnStepProcess_0() throws Exception {
	// 		HandleFacCommitteePreview->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleFacInfoCommittee", this);
	}

	public void preFacInfoAuthoriser_OnStepProcess_0() throws Exception {
	// 		PreFacInfoAuthoriser->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preFacInfoAuthoriser", this);
	}

	public void handleFacInfoAuthoriser_OnStepProcess_0() throws Exception {
	// 		HandleFacInfoAuthoriser->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleFacInfoAuthoriser", this);
	}

	public void preFacAuthoriserPreview_OnStepProcess_0() throws Exception {
	// 		PreFacAuthoriserPreview->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preAuthoriserPreview", this);
	}

	public void handleFacAuthoriserPreview_OnStepProcess_0() throws Exception {
	// 		HandleFacAuthoriserPreview->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleAuthoriserPreview", this);
	}

	public void preBAToxin_OnStepProcess_0() throws Exception {
	// 		PreBAToxin->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preBAToxin", this);
	}

	public void handleBAToxin_OnStepProcess_0() throws Exception {
	// 		HandleBAToxin->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleBAToxin", this);
	}

	public void preOtherAppInfo_OnStepProcess_0() throws Exception {
	// 		PreOtherAppInfo->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preOtherAppInfo", this);
	}

	public void handleOtherAppInfo_OnStepProcess_0() throws Exception {
	// 		HandleOtherAppInfo->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleOtherAppInfo", this);
	}

	public void prePrimaryDoc_OnStepProcess_0() throws Exception {
	// 		PrePrimaryDoc->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "prePrimaryDoc", this);
	}

	public void handlePrimaryDoc_OnStepProcess_0() throws Exception {
	// 		HandlePrimaryDoc->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handlePrimaryDoc", this);
	}

	public void preAfc_OnStepProcess_0() throws Exception {
	// 		PreAfc->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preApprovedFacilityCertifier", this);
	}

	public void handleAfc_OnStepProcess_0() throws Exception {
	// 		HandleAfc->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleApprovedFacilityCertifier", this);
	}

	public void prePreviewSubmit_OnStepProcess_0() throws Exception {
	// 		PrePreviewSubmit->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "prePreviewSubmit", this);
	}

	public void handlePreviewSubmit_OnStepProcess_0() throws Exception {
	// 		HandlePreviewSubmit->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handlePreviewSubmit", this);
	}

	public void actionFilter_OnStepProcess_0() throws Exception {
	// 		ActionFilter->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "actionFilter", this);
	}

	public void jumpFilter_OnStepProcess_0() throws Exception {
	// 		JumpFilter->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "jumpFilter", this);
	}

	public void preAcknowledge_OnStepProcess_0() throws Exception {
	// 		PreAcknowledge->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preAcknowledge", this);
	}

	public void print_OnStepProcess_0() throws Exception {
	// 		Print->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "print", this);
	}

	public void preFacInfoCommittee_OnStepProcess_0() throws Exception {
	// 		PreFacInfoCommittee->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "preFacInfoCommittee", this);
	}

	public void handleFacInfoCommittee_OnStepProcess_0() throws Exception {
	// 		HandleFacInfoCommittee->OnStepProcess
		EngineHelper.delegate(DELEGATOR, "handleFacInfoCommittee", this);
	}

}
