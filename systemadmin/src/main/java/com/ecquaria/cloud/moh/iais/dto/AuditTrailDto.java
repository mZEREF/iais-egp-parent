/*
 * This file is generated by ECQ project skeleton automatically.
 *
 *   Copyright 2019-2049, Ecquaria Technologies Pte Ltd. All rights reserved.
 *
 *   No part of this material may be copied, reproduced, transmitted,
 *   stored in a retrieval system, reverse engineered, decompiled,
 *   disassembled, localised, ported, adapted, varied, modified, reused,
 *   customised or translated into any language in any form or by any means,
 *   electronic, mechanical, photocopying, recording or otherwise,
 *   without the prior written permission of Ecquaria Technologies Pte Ltd.
 */

package com.ecquaria.cloud.moh.iais.dto;

import com.ecquaria.cloud.moh.iais.common.utils.MiscUtil;
import lombok.Getter;
import lombok.Setter;
import net.sf.oval.constraint.NotBlank;
import net.sf.oval.constraint.NotNull;

import java.io.Serializable;

@Getter
@Setter
public
class AuditTrailDto implements Serializable {
    private static final ThreadLocal<com.ecquaria.cloud.moh.iais.web.logging.dto.AuditTrailDto> threadContext = new ThreadLocal<>();

    private static final long serialVersionUID = -4041617477642635395L;

    @NotBlank(message = "can not is blank!", profiles = {"edit", "search"})
    @NotNull(message = "can not is null!", profiles = {"edit", "search"})
    private int operation;
    private String nricNumber;
    private String uenId;
    private String mohUserId;
    private int loginType;
    private String userDomain;
    private String sessionId;
    private String clientIp;
    private String userAgent;
    private String applicationNum;
    private String licenseNum;
    private String module;
    private String functionName;
    private String programeName;
    private String beforeAction;
    private String afterAction;
    private String validationFail;
    private String viewParams;
    private String failReason;

    public
    static com.ecquaria.cloud.moh.iais.web.logging.dto.AuditTrailDto getThreadDto() {
    com.ecquaria.cloud.moh.iais.web.logging.dto.AuditTrailDto dto = threadContext.get();
        if (dto == null)
        return null;

        return MiscUtil.transferEntityDto(dto, com.ecquaria.cloud.moh.iais.web.logging.dto.AuditTrailDto.class);
    }

    public
    static void setThreadDto(com.ecquaria.cloud.moh.iais.web.logging.dto.AuditTrailDto dto) {
        threadContext.set(dto);
    }

    public
    static void removeThreadDto() {
        threadContext.remove();
    }
}
