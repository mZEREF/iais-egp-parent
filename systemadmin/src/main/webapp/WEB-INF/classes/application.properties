#server.port=8080

spring.application.name=demo
feign.hystrix.enabled = false
spring.aop.proxy-target-class=true

spring.jmx.default-domain=${spring.application.name}
endpoints.jmx.domain=${spring.application.name}
endpoints.jmx.static-names=${spring.application.name}
endpoints.jmx.unique-names=true

#spring.datasource.url=jdbc:mysql://mysql:3306/egpcloud?autoReconnect=true&useSSL=false&useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&serverTimezone=UTC&pinGlobalTxToPhysicalConnection=true
#spring.datasource.username=egpcloud
#spring.datasource.password=password$1
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
#spring.jpa.hibernate.use-new-id-generator-mappings = true

spring.datasource.url=jdbc:sqlserver://192.168.7.84:1433;DatabaseName=EGPCLOUDFE
spring.datasource.username=sa
spring.datasource.password=P@ssword$123
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerXADataSource
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServer2012Dialect
spring.jpa.hibernate.use-new-id-generator-mappings=true

#Pool
spring.datasource.initial-size=10
spring.datasource.max-active=50
spring.datasource.min-idle=5
spring.datasource.max-idle=5

spring.datasource.test-on-borrow=true
spring.datasource.validation-query=select 1;
spring.jpa.show-sql=false

# redis
spring.redis.host=redis
spring.redis.port=6379

# eureka
eureka.instance.hostname=${spring.application.name}
eureka.instance.metadata-map.cluster=${spring.application.name}
eureka.instance.leaseRenewalIntervalInSeconds= 10
eureka.client.registryFetchIntervalSeconds= 5
eureka.client.serviceUrl.defaultZone= http://eureka:${eureka.port:8761}/eureka/

# histrix
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds= 60000
hystrix.command.StoreSubmission.execution.isolation.thread.timeoutInMilliseconds= 60000
#hystrix.threadpool.default.coreSize = 100
hystrix.circuitBreaker.errorThresholdPercentage = 25
#hystrix.command.StoreSubmission.execution.isolation.thread.timeoutInMilliseconds: 30000
#hystrix.command.StoreSubmission.circuitBreaker.requestVolumeThreshold: 4
#hystrix.command.StoreSubmission.circuitBreaker.sleepWindowInMilliseconds: 60000
#hystrix.command.StoreSubmission.metrics.rollingStats.timeInMilliseconds: 180000
#hystrix.collapser.StoreSubmission.maxRequestsInBatch: 1
#hystrix.collapser.StoreSubmission.requestCache.enabled: FALSE
#hystrix.threadpool.StoreSubmission.coreSize: 30
#hystrix.threadpool.StoreSubmission.metrics.rollingStats.timeInMilliseconds: 180000

# ribbon
ribbon.NIWSServerListClassName=com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList
ribbon.ServerListRefreshInterval=5000
ribbon.MaxAutoRetries=2
ribbon.ReadTimeout=5000


# spring cache redis config

#spring.redis.cluster.max-redirects= # Maximum number of redirects to follow when executing commands across the cluster.
#spring.redis.cluster.nodes= # Comma-separated list of "host:port" pairs to bootstrap from.
#spring.redis.database=0 # Database index used by the connection factory.
#spring.redis.host=localhost # Redis server host.
#spring.redis.password= # Login password of the redis server.
#spring.redis.pool.max-active=8 # Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
#spring.redis.pool.max-idle=8 # Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
#spring.redis.pool.max-wait=-1 # Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
#spring.redis.pool.min-idle=0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
#spring.redis.port=6379 # Redis server port.
#spring.redis.sentinel.master= # Name of Redis server.
#spring.redis.sentinel.nodes= # Comma-separated list of host:port pairs.
#spring.redis.timeout=0 # Connection timeout in milliseconds

#spring.cache.cache-names= # Comma-separated list of cache names to create if supported by the underlying cache manager.
#spring.cache.caffeine.spec= # The spec to use to create caches. Check CaffeineSpec for more details on the spec format.
#spring.cache.couchbase.expiration=0 # Entry expiration in milliseconds. By default the entries never expire.
#spring.cache.type=redis # Cache type, auto-detected according to the environment by default.

# sftp
sftp.connect.type.is.privatekey=true
sftp.server.host=192.168.7.90
sftp.server.port=22
sftp.server.username=ubuntu
sftp.server.password=
sftp.server.private.key=ecqsz.pem
sftp.server.timeout=10000
sftp.server.temp.dir=/home/ubuntu

#rabbitmq
endpoints.heapdump.enabled=false
endpoints.actuator.enabled=false
spring.cloud.stream.bindings.application_output_channel.destination=application_channel
spring.cloud.stream.bindings.message_output_channel.destination=message_channel
spring.cloud.stream.bindings.task_output_channel.destination=task_channel
spring.cloud.stream.bindings.transfer_retry_output_channel.destination=transfer_retry_channel
spring.cloud.stream.bindings.sop_audit_log_output_channel.destination=sop_audit_log_channel

spring.rabbitmq.addresses=amqp://rabbitmq:5672
spring.rabbitmq.username=egp
spring.rabbitmq.password=egp

#Server Config
egp.eservice.bat.uiless.site.url=https://egpcloudfe
egp.citizen.info.default.implement.url=https://nascloudfe/nas/restservice/userInfo/
egp.site.url=https://egpcloudfe
egp.hmodel.webapp.url.backend=https://egpcloudbe
egp.hmodel.webapp.url.frontend=https://egpcloudfe
egp.hmodel.enable=true
egp.hmodel.type=frontend