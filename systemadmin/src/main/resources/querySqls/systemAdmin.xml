<?xml version="1.0" encoding="UTF-8"?>
<sqls catalog="systemAdmin">
    <sql key = "masterCodeQuery" remarks = "query MasterCode sql">
        <![CDATA[
        SELECT * FROM (
            SELECT master_code_id,
                   master_code_key,
                   (SELECT category_description FROM cm_master_code_category where code_category = mc.code_category) as code_category,
                   code_value,
                   code_description,
                   filter_value,
                   sequence,
                   remarks,
                   status,
                   effective_from,
                   effective_to,
                   version
            FROM CM_MASTER_CODE as mc) AS ACM
            WHERE ACM.STATUS != 'CMSTAT002'
            <#if id??> AND CHARINDEX(:id, ACM.master_code_id) >0</#if>
            <#if codeCategory??> AND ACM.code_category = :codeCategory</#if>
            <#if codeValue??> AND ACM.code_value LIKE :codeValue</#if>
            <#if codeDescription??> AND ACM.code_description LIKE :codeDescription</#if>
            <#if filterValue??> AND ACM.filter_value LIKE :filterValue</#if>
            <#if esd??> AND ACM.effective_from >= :esd</#if>
            <#if eed??> AND ACM.effective_to <= :eed</#if>
            <#if codeStatus??> AND ACM.status = :codeStatus</#if>
        ]]>
    </sql>

    <sql key = "IntranetUserQuery" remarks = "query IntranetUser sql">
        <![CDATA[
            SELECT
            id,
            USER_ID,
			DISPLAY_NAME,
			EMAIL_ADDR,
			STATUS
			FROM user_account as iu
            WHERE 1=1 AND STATUS !='CMSTAT002' AND USER_DOMAIN = 'intranet'
            <#if id??> AND CHARINDEX(:id, iu.id) >0</#if>
            <#if userId??> and charindex(:userId, iu.USER_ID) >0</#if>
            <#if displayName??> and charindex(:displayName, iu.DISPLAY_NAME) >0</#if>
            <#if status??> and charindex(:status, iu.STATUS) >0</#if>
            <#if email??> and charindex(:email, iu.EMAIL_ADDR) >0</#if>
        ]]>
    </sql>

    <sql key = "findMasterCodeByDescription" remarks = "Find MasterCode By Description">
        <![CDATA[
            SELECT
                master_code_id,
                master_code_key,
                (SELECT category_description FROM cm_master_code_category where code_category = t1.code_category) as code_category,
                code_value,
                code_description,
                remarks,
                status,
                effective_from,
                effective_to,
                version,
            FROM
                cm_master_code as t1
            WHERE code_category =
                (
                    SELECT
                        code_category
                     FROM
                        cm_master_code_category AS cmcc
                     WHERE 1=1
                        <#if categoryDescription??> AND cmcc.catequeryMessagegory_description = :categoryDescription</#if>
                )
            <#if master_code_id??> AND CHARINDEX(:master_code_id, mc.master_code_id) >0</#if>
        ]]>
    </sql>

    <sql key = "queryMessage" remarks = "query message sql">
        <![CDATA[
            SELECT msg_id, code_key, domain_type, msg_type, module, description, message, status
            FROM CM_MESSAGE
            WHERE 1=1 AND status != 'CMSTAT002'
            <#if domainType??> AND domain_type = :domainType</#if>
            <#if msgType??> AND msg_type = :msgType</#if>
            <#if module??> AND module = :module</#if>
        ]]>
    </sql>

    <sql key="querySystemParam" remarks="query system param sql">
        <![CDATA[
            select pid, domain_type , module, description, units,  value, param_type, is_mandatory,  can_update , max_length, status, properties_key, UPDATED_DT, UPDATED_BY
            from
            cm_system_parameters
            where 1=1 and value != 'CMSTAT002'
            <#if domainType??> and domain_type = :domainType</#if>
            <#if module??> and module = :module</#if>
            <#if description??> and charindex(:description, description) >0</#if>
            <#if units??> and units = :units</#if>
            <#if value??> and value = :value</#if>
            <#if param_type??> and param_type = :param_type</#if>
            <#if is_mandatory??> and is_mandatory = :is_mandatory</#if>
            <#if can_update??> and can_update = :can_update</#if>
            <#if max_length??> and max_length = :max_length</#if>

            <#if status??> and status = :status</#if>
        ]]>
    </sql>


    <sql key="queryFullModeAuditTrail" remarks="query full reocrd for audit trail">
        <![CDATA[
         select
             audit_id,action_time,
            operation,
            case  operation
            when 1 then 'Login'
            when 2 then 'Logout'
            when 3 then 'Login fail'
            when 4 then 'View Record'
            when 5 then 'Validation fail'
            when 6 then 'Insert'
            when 7 then 'Update'
            when 8 then 'Delete'
            else 'unknown'
            end operation_excel,
            nric_number,
            uen_id,
            moh_user_id,
            login_type,
            session_id,
            client_ip,
            user_agent,
            application_number,
            license_number,
            module,
            function_name,
            programme_name,
            before_action,
            after_action,
            validation_fail_detail,
            view_params,
            failed_reason,
            [domain],
            case [domain]
            when 20001 then 'Batch_Job'
            when 20002 then 'Intranet'
            when 20003 then 'Internet'
            else 'unknown'
            end domain_excel
            from at_audit_trail
            where 1 = 1
            <#if operation??> and operation = :operation</#if>
            <#if nric_number??> and nric_number = :nricnumber</#if>
            <#if startDate??> and action_time >= CONVERT(datetime, :startDate, 103) </#if>
            <#if endDate??> and action_time <= CONVERT(datetime, :endDate, 103) </#if>
            <#if operationType??> and [domain] = :operationType </#if>
            <#if user??> and moh_user_id = :user </#if>
        ]]>
    </sql>

    <sql key="queryDataMaskModeAuditTrail" remarks="query data mask for audit trail">
        <![CDATA[
             select
             audit_id,action_time,
            operation,
            case  operation
            when 1 then 'Login'
            when 2 then 'Logout'
            when 3 then 'Login fail'
            when 4 then 'View Record'
            when 5 then 'Validation fail'
            when 6 then 'Insert'
            when 7 then 'Update'
            when 8 then 'Delete'
            else 'unknown'
            end operation_excel,
            nric_number,
            uen_id,
            moh_user_id,
            login_type,
            session_id,
            client_ip,
            user_agent,
            application_number,
            license_number,
            module,
            function_name,
            programme_name,
            before_action,
            after_action,
            validation_fail_detail,
            view_params,
            failed_reason,
            [domain]ï¼Œ
            case [domain]
            when 20001 then 'Batch_Job'
            when 20002 then 'Intranet'
            when 20003 then 'Internet'
            else 'unknown'
            end domain_excel
             from at_audit_trail
            where 1 = 1 and operation not in(4, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24 )
            <#if operation??> and operation = :operation</#if>
            <#if nric_number??> and nric_number = :nricnumber</#if>
            <#if startDate??> and action_time >= CONVERT(datetime, :startDate, 103) </#if>
            <#if endDate??> and action_time <= CONVERT(datetime, :endDate, 103) </#if>
            <#if operationType??> and [domain] = :operationType </#if>
            <#if user??> and moh_user_id = :user </#if>
        ]]>
    </sql>

    <sql key = "queryHcsaService" remarks="query hcsa service parameter of checklist">
        <![CDATA[
            select stype.id as service_id, scategory.id as category_id, scategory.name as category_name, stype.name as service_name
            from iais.dbo.hcsa_service_type stype, iais.dbo.hcsa_service_category scategory where stype.category_id = scategory.id
        ]]>
    </sql>

    <sql key="listChklItem"  remarks="query chechlist items">
        <![CDATA[
                select item.id as item_id, regulation.clause_no as clause_num, regulation.clause as clause,
                item.question as checklistitem, item.answer_type as answer_type, item.risk_level as risk_level,
                item.status as status from chkl_config_hcsa_svc_item_pool item, chkl_config_hcsa_svc_regulation regulation where 1 = 1
                and item.regulation_id = regulation.id and item.status = 'cmstat001'
                <#if itemid??> and charindex(:itemid, item.id) >0</#if>
                <#if regulationclauseno??> and charindex(:regulationclauseno, regulation.clause_no) >0 </#if>
                <#if regulationclause??> and charindex(:regulationclause, regulation.clause) >0 </#if>
                <#if checklistItem??> and charindex(:checklistItem, item.question) >0</#if>
                <#if answertype??> and item.answer_type = :answertype</#if>
                <#if risklevel??> and item.risk_level = :risklevel</#if>
                <#if status??> and item.status = :status</#if>
        ]]>

    </sql>

    <sql key="listChecklistItemByItemId"  remarks="query chechlist items by item id">
        <![CDATA[
                select item.id as item_id, regulation.clause_no as clause_num, regulation.clause as clause,
                item.question as checklistitem, item.answer_type as answer_type, item.risk_level as risk_level,
                item.status as status from chkl_config_hcsa_svc_item_pool item, chkl_config_hcsa_svc_regulation regulation where 1 = 1
                and item.regulation_id = regulation.id and item.status = 'cmstat001'
                <#if itemid??> item.id in(:itemid)</#if>
        ]]>
    </sql>

    <sql key="templatesQuery"  remarks="QUERY MESSAGE TEMPLATE">
        <![CDATA[
              SELECT *  FROM (SELECT
                mt.id,
                mt.message_type,
                mt.template_name,
                mt.message_content,
                mt.delivery_mode,
                mt.effective_from,
                mt.effective_to,
                (SELECT mtp.process_type FROM message_template_process AS mtp WHERE mtp.message_template_id = mt.ID ) as process,
                (SELECT mtr.recipient FROM message_template_recipient  AS mtr WHERE mtr.message_template_id = mt.ID ) as recipient
            FROM message_template AS mt) AS T1
            WHERE 1=1
            <#if id??> and charindex(:id, id) >0</#if>
            <#if msgType??> AND T1.message_type = :msgType</#if>
            <#if templateName??> AND T1.template_name like :templateName</#if>
            <#if deliveryMode??> AND T1.delivery_mode = :deliveryMode</#if>
            <#if tepProcess??> AND T1.process = :tepProcess</#if>
            <#if esd??> AND T1.effective_from >= :esd</#if>
            <#if eed??> AND T1.effective_to <= :eed</#if>
        ]]>
    </sql >

    <sql key="getBlackedOutDateList"  remarks="Get blacked out date list">
        <![CDATA[
            select T1.ID AS ID,
            T1.SRC_SYSTEM_ID AS SRC_SYSTEM_ID,
            T1.GROUP_SHORT_NAME AS GROUP_SHORT_NAME,
            T1.START_DATE AS START_DATE,
            T1.END_DATE AS END_DATE,
            T1.[DESC] as [DESC],
            T1.STATUS as STATUS
            from appt_blackout_date T1, appt_src_system T2
            where T1.SRC_SYSTEM_ID = T2.ID
            AND T1.STATUS in ('CMSTAT001','CMSTAT003')
            <#if shortName??> AND T1.GROUP_SHORT_NAME = :shortName</#if>
            <#if desc??> and charindex(:desc, T1.[DESC]) >0</#if>
            <#if startDate??> AND T1.START_DATE >= :startDate</#if>
            <#if endDate??> AND T1.END_DATE <= :endDate</#if>
            <#if status??> AND T1.STATUS = :status</#if>
            <#if bkStartDate??> AND T1.START_DATE >= CONVERT(datetime, :bkStartDate, 103)</#if>
            <#if bkEndDate??> AND T1.END_DATE >= CONVERT(datetime, :bkEndDate, 103)</#if>
        ]]>
    </sql>

    <sql key="getWorkingGroupByUserId">
        <![CDATA[
            select DISTINCT T1.ID AS id,
            T3.group_name as group_name,
            T3.group_domain AS group_domain,
            T2.USER_ID,
            T3.STATUS AS STATUS
            from
            user_group_correlation T1,
            user_account T2,
            working_group T3
            where T1.user_id = T2.ID
            and T2.USER_DOMAIN = 'intranet'
            and T3.id = T1.group_id
            and T3.id in('CA82D485-F90C-EA11-BE7D-000C29F371DC', '52FBF1AC-F90C-EA11-BE7D-000C29F371DC', '76E149C0-F90C-EA11-BE7D-000C29F371DC', '1B529DD0-F90C-EA11-BE7D-000C29F371DC')
            and T1.IS_GRP_LEADER = 1
            <#if userId??> AND T2.id = :userId </#if>
        ]]>
    </sql>

    <sql key="getInspWorkingGroup">
        <![CDATA[
            select DISTINCT T3.ID AS id,
            T3.group_name as group_name,
            T3.group_domain AS group_domain,
            T2.USER_ID,
            T3.STATUS AS STATUS
            from
            user_group_correlation T1,
            user_account T2,
            working_group T3
            where T1.user_id = T2.ID
            and T2.USER_DOMAIN = 'intranet'
            and T3.id = T1.group_id
            and T3.id in('CA82D485-F90C-EA11-BE7D-000C29F371DC', '52FBF1AC-F90C-EA11-BE7D-000C29F371DC', '76E149C0-F90C-EA11-BE7D-000C29F371DC', '1B529DD0-F90C-EA11-BE7D-000C29F371DC')
            <#if userId??> AND T2.id = :userId </#if>
        ]]>
    </sql>
    <sql key="getHolidayList"  remarks="Get public holiday">
        <![CDATA[
            select
            id,FROM_DATE,TO_DATE,DESCRIPTION,STATUS
            from public_holiday
            WHERE  1 = 1
            <#if description??> AND DESCRIPTION like :description</#if>
            <#if nonWorking??> AND FROM_DATE <= CONVERT(datetime, :nonWorking, 103) AND TO_DATE > CONVERT(datetime, :nonWorking, 103)</#if>
            <#if status??> AND STATUS = :status</#if>
            <#if year??> AND (FROM_DATE like :year or TO_DATE like :year)</#if>
        ]]>
    </sql>

    <sql key="queryInspectorCalendar"  remarks="Query Inspector Calendar">
        <![CDATA[
             SELECT
            T3.ID as ID,
            SUBSTRING(CONVERT(varchar(100),T3.BLOCK_OUT_END, 20), 0,5) AS YEAR,
            T2.NAME AS NAME,
            T3.BLOCK_OUT_START as BLOCK_OUT_START,
            T3.BLOCK_OUT_END AS BLOCK_OUT_END,
            T3.REMARKS AS REMARKS,
            T3.RECURRENCE AS RECURRENCE,
            T3.BLOCK_OUT_END AS RECURRENCE_END_DATE
            FROM appt_user_system_correlation T1
            JOIN appt_agency_user T2 ON T1.AGENCY_USER_ID = T2.ID
            JOIN appt_user_non_avail T3 ON T1.ID = T3.USER_SYS_CORRE_ID
            <#if wrkGroup??> AND T1.GROUP_SHORT_NAME = :wrkGroup </#if>
            <#if userId??> AND T2.LOGIN_USER_ID = :userId </#if>
            <#if userName??> AND charindex(:userName, T2.NAME) >0</#if>
            <#if userBlockDateStart??> AND T3.BLOCK_OUT_START > CONVERT(datetime, :userBlockDateStart, 103)</#if>
            <#if userBlockDateEnd??> AND T3.BLOCK_OUT_END < CONVERT(datetime, :userBlockDateEnd, 103)</#if>
            <#if userBlockDateDescription??> AND charindex(:userBlockDateDescription, T3.REMARKS) >0 </#if>
            <#if year??>
                    AND T3.BLOCK_OUT_START > CONVERT(datetime, :year, 20)
                    AND T3.BLOCK_OUT_END < dateadd(day, 365, CONVERT(datetime, :year, 20))
             </#if>
             <#if recurrence??> AND T3.RECURRENCE = :recurrence </#if>
             <#if recurrenceEndDate??> AND T3.BLOCK_OUT_END < CONVERT(datetime, :recurrenceEndDate, 103)</#if>
        ]]>
    </sql>

    <sql key="queryMassDistributionList"  remarks="Mass and email list">
        <![CDATA[
            SELECT
            T1.ID,T1.DISTRIBUTION_NAME,T1.SERVICE_CODE,T1.DELIVERY_MODE,T1.CREATED_DT,T1.CREATED_BY,T2.RECIPIENTS_ROLE
            FROM distribution T1
             JOIN distribution_role T2 ON T1.ID = T2.DISTRIBUTION_ID
            <#if status??> AND T1.STATUS = :status</#if>
            <#if description??> AND DISTRIBUTION_NAME like :description</#if>
            <#if recipients??> AND RECIPIENTS_ROLE like :recipients</#if>
            <#if service??> AND SERVICE_CODE =:service</#if>
            <#if mode??> AND T1.DELIVERY_MODE = :mode</#if>
        ]]>
    </sql>

    <sql key="queryBlastManagementList"  remarks="blast management list">
        <![CDATA[
            SELECT
            T1.ID,T1.MSG_CONTENT,T1.SUBJECT,T1.MSG_NAME,T2.DISTRIBUTION_NAME,T1.DELIVERY_MODE,T1.SCHEDULE_SEND_DATE,
            T1.ACTUAL_SEND_DATE,T1.STATUS,T3.DOC_NAME,T1.CREATED_BY,T1.CREATED_DT
            FROM email_sms_blast T1
            LEFT JOIN distribution T2 ON T1.DISTRIBUTION_ID = T2.ID
            LEFT JOIN email_sms_blast_attachment T3 ON T1.ID = T3.BLAST_ID
            WHERE  (T1.status = 'CMSTAT001' or T1.status = 'CMSTAT003')
            <#if id??> AND T1.ID =:id</#if>
            <#if description??> AND DISTRIBUTION_NAME like :description</#if>
            <#if msgName??> AND MSG_NAME like :msgName</#if>
            <#if mode??> AND T1.DELIVERY_MODE = :mode</#if>
            <#if distribution??> AND DISTRIBUTION_ID = :distribution</#if>
            <#if start??> AND T1.SCHEDULE_SEND_DATE > CONVERT(datetime, :start, 103)</#if>
            <#if end??> AND T1.SCHEDULE_SEND_DATE < CONVERT(datetime, :end, 103)</#if>
        ]]>
    </sql>
    <sql key="audit"  remarks="audit">
        <![CDATA[
            SELECT
            T1.notification_id,T3.history_id,T1.notification_type,T1.recipient,T1.sender,T1.subject,T1.content,T1.number_of_attempts,
            T2.file_name,T3.log_msg,T3.sent_time
            FROM notification T1
            left JOIN notification_annex T2 ON T1.REQUEST_REF_NO = T2.request_ref_num
            left JOIN notification_history T3 ON T1.notification_id = T3.notification_id
            WHERE  1 = 1
            <#if refNum??> AND T1.REQUEST_REF_NO =:refNum</#if>
        ]]>
    </sql>

    <sql key="resend"  remarks="resend">
        <![CDATA[
            SELECT
            T1.notification_id,T1.REQUEST_REF_NO,T1.recipient,T1.sender,T1.subject,T1.status,T3.log_msg,T3.sent_time
            FROM notification T1
            JOIN notification_annex T2 ON T1.REQUEST_REF_NO = T2.request_ref_num
            left JOIN (select N1.history_id,N1.notification_id,N1.sent_time,N1.log_msg from notification_history N1 JOIN
             (select max(history_id) as history_id from notification_history GROUP BY notification_id) N2
             on N1.history_id = N2.history_id) T3 ON T1.notification_id = T3.notification_id
             WHERE  1 = 1
            <#if start??> AND T3.sent_time > CONVERT(datetime, :start, 103)</#if>
            <#if end??> AND T3.sent_time < CONVERT(datetime, :end, 103)</#if>
        ]]>
    </sql>

</sqls>


